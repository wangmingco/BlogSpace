{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/even/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/even/source/robots.txt","path":"robots.txt","modified":0,"renderable":1},{"_id":"themes/even/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","path":"fonts/chancery/apple-chancery-webfont.eot","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","path":"fonts/chancery/apple-chancery-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","path":"fonts/chancery/apple-chancery-webfont.woff","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","path":"fonts/chancery/apple-chancery-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/even/source/js/src/even.js","path":"js/src/even.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/blank.gif","path":"lib/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","path":"lib/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","path":"lib/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","path":"lib/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","path":"lib/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","path":"lib/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","path":"lib/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/nprogress/nprogress.min.css","path":"lib/nprogress/nprogress.min.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","path":"lib/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","path":"lib/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/nprogress/nprogress.min.js","path":"lib/nprogress/nprogress.min.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/pjax/jquery.pjax.min.js","path":"lib/pjax/jquery.pjax.min.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/slideout/slideout.js","path":"lib/slideout/slideout.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/slideout/slideout.min.js","path":"lib/slideout/slideout.min.js","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","path":"fonts/chancery/apple-chancery-webfont.svg","modified":0,"renderable":1},{"_id":"themes/even/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","path":"lib/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","path":"lib/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/even/.eslintrc","hash":"0fcde446104e73d7159f8574f28fe661acdb384e","modified":1542454732000},{"_id":"themes/even/.gitignore","hash":"1d54f4b6fe44e61eae3d29e95de4b2618a6619aa","modified":1542454732000},{"_id":"themes/even/LICENSE","hash":"6fd796a4c624297885ceed920ac7130a96f29a85","modified":1542454732000},{"_id":"themes/even/README.md","hash":"5e2144c7940d13aba18fd3ff113c5259bfab19bc","modified":1542454732000},{"_id":"themes/even/_config.yml","hash":"56abe43ec99bbc0bb900b8378ec715edaaaa6410","modified":1542454732000},{"_id":"themes/even/package.json","hash":"3aef4b633897925e9d6430e3838a7df022978b4f","modified":1542454732000},{"_id":"source/_posts/distributed-id.md","hash":"f51355a7f8ddd53723b81f8e0e926206c8e1eabd","modified":1542456744000},{"_id":"source/_posts/agent-mock.md","hash":"7778056e332bf5d2f41571de3d924d79faa6cc40","modified":1542456410000},{"_id":"themes/even/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1542454732000},{"_id":"source/_posts/java-books.md","hash":"79cb0ae65aca76212ddff704900aebe48db7d945","modified":1542454853000},{"_id":"themes/even/.git/FETCH_HEAD","hash":"894d88066b505c15abda34eff587a36337b8d81a","modified":1542454946000},{"_id":"source/_posts/pegjs-document.md","hash":"80ced49b2ab9381236ddf784ab5b17adbdea37ea","modified":1542454859000},{"_id":"themes/even/.git/config","hash":"5ef1223485809abf438784735be8518631c5a612","modified":1542454732000},{"_id":"themes/even/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1542454621000},{"_id":"themes/even/.git/index","hash":"640c3fec0e02750c424a0902b4b9606909b48eb7","modified":1542455227000},{"_id":"themes/even/.git/packed-refs","hash":"ebd85e144e14b2d35405d62339d11634b6cb1d39","modified":1542454732000},{"_id":"themes/even/languages/default.yml","hash":"3f3d4f2657525c4a0660257df944a1936e703609","modified":1542454732000},{"_id":"themes/even/languages/en.yml","hash":"563b1e018a7aff5e5369093cdffc57f8e3f47a29","modified":1542454732000},{"_id":"themes/even/languages/zh-cn.yml","hash":"f7da3fc6252df9d19abd1321b3c5a8c2ad13cca7","modified":1542454732000},{"_id":"themes/even/layout/_layout.swig","hash":"f688ecdf78f9699907599fe899012fb5e29a9f29","modified":1542454732000},{"_id":"themes/even/layout/archive.swig","hash":"52a91a52d34556c77815cd03bd7d5b9fd66b04ce","modified":1542454732000},{"_id":"themes/even/layout/categories.swig","hash":"21987803e162bd9383502d9de07d5d531b78cb53","modified":1542454732000},{"_id":"themes/even/layout/index.swig","hash":"5645f87d5ea49ee6cc3640e27a06d85f0f9cc528","modified":1542454732000},{"_id":"themes/even/layout/page.swig","hash":"3cade69477ab4ec34aac9e9dbf1b8cd0485a87a9","modified":1542454732000},{"_id":"themes/even/layout/post.swig","hash":"367b204579f8b9612399693a803c224925399a87","modified":1542454732000},{"_id":"themes/even/layout/tags.swig","hash":"c4d4cb9a3bcd05368d93fff107141899370933df","modified":1542454732000},{"_id":"themes/even/source/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1542454732000},{"_id":"themes/even/source/robots.txt","hash":"eed1ebad39b24e7942fcaf8f27da7487eb9f956e","modified":1542454732000},{"_id":"themes/even/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1542454621000},{"_id":"themes/even/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1542454621000},{"_id":"themes/even/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1542454621000},{"_id":"themes/even/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1542454621000},{"_id":"themes/even/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1542454621000},{"_id":"themes/even/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1542454621000},{"_id":"themes/even/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1542454621000},{"_id":"themes/even/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1542454621000},{"_id":"themes/even/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1542454621000},{"_id":"themes/even/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1542454621000},{"_id":"themes/even/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1542454621000},{"_id":"themes/even/.git/logs/HEAD","hash":"ee4ddf4a9da0947414be08d94bf1cbf9f56fba27","modified":1542454732000},{"_id":"themes/even/layout/_macro/archive.swig","hash":"3bf04ce2fceda146116f6bc811fc9b54beb182c7","modified":1542454732000},{"_id":"themes/even/layout/_macro/post.swig","hash":"b3a31f89d9bdc162f0117e32a4c3a959202d61c6","modified":1542454732000},{"_id":"themes/even/layout/_partial/comments.swig","hash":"7381a356cea9d28a059aa72b0653e81ca85b2622","modified":1542454732000},{"_id":"themes/even/layout/_partial/head.swig","hash":"774a1a6e746e404c5c684fc2cc5d5fc93cb16fd1","modified":1542454732000},{"_id":"themes/even/layout/_partial/footer.swig","hash":"2fc41d0b6a58ffeb7692a5f938697812f674ae29","modified":1542454732000},{"_id":"themes/even/layout/_partial/header.swig","hash":"49c1cabfe8d4692b1743ca19f6296334e7d4781a","modified":1542454732000},{"_id":"themes/even/layout/_partial/pagination.swig","hash":"f9985689aba2cf578d2fe43e02f53349b53bd76b","modified":1542454732000},{"_id":"themes/even/layout/_partial/slideout.swig","hash":"0c2a10d97f8beedaaa23fbf98c5c4ff267213014","modified":1542454732000},{"_id":"themes/even/layout/_script/analytics.swig","hash":"24ba4a8adcaf09c9ede76405ee732385595d8e39","modified":1542454732000},{"_id":"themes/even/layout/_script/comments.swig","hash":"bad8bc57e9479c6771f1942e092dd30b614bb17b","modified":1542454732000},{"_id":"themes/even/layout/_script/counter.swig","hash":"016ee9a2aeac6f957c8e4ed421394c9a57d389ed","modified":1542454732000},{"_id":"themes/even/layout/_script/libs.swig","hash":"689d2e6b829e028e9321a7174a9fee26bc1fc6f1","modified":1542454732000},{"_id":"themes/even/layout/_script/push.swig","hash":"2aacb350e2e4870f175ba4783c710c4c4006274c","modified":1542454732000},{"_id":"themes/even/layout/_script/theme.swig","hash":"ef8207e22d10ba11821749e1dc0041cf0104d7e3","modified":1542454732000},{"_id":"themes/even/source/css/_base.scss","hash":"ffd8c02b4e1dde0433458b0fef02f01a1fd0f1dd","modified":1542454732000},{"_id":"themes/even/source/css/style.scss","hash":"d984c3006404eb1130a6c6c369da1902c9d9a6a5","modified":1542454732000},{"_id":"themes/even/source/css/_variables.scss","hash":"5c656de0ea439c04f69211541f7edcb14d17adc0","modified":1542454732000},{"_id":"themes/even/.git/refs/heads/master","hash":"0c403718c88bea94cb4ce72416cb042fedc208ee","modified":1542454732000},{"_id":"themes/even/layout/_partial/_footer/social.swig","hash":"fde32c1b1edb2c2bd879bf1043da164c5f2b91f5","modified":1542454732000},{"_id":"themes/even/layout/_partial/_post/copyright.swig","hash":"e3bc479c323612a52eb0367a4ba4cfcd3fadd0a9","modified":1542454732000},{"_id":"themes/even/layout/_partial/_post/reward.swig","hash":"faf64b5461970fda72863e9779f3f024cb493658","modified":1542454732000},{"_id":"themes/even/layout/_partial/_head/meta.swig","hash":"0b3ce980cc48cce232527637084fc223cdcbf3d1","modified":1542454732000},{"_id":"themes/even/layout/_partial/_post/toc.swig","hash":"2150852c6020262333e6468cdfa5bdb216418f42","modified":1542454732000},{"_id":"themes/even/layout/_script/_analytics/baidu-analytics.swig","hash":"ce7c137b4a90a0a87d770a5c8cabd0849cd477ac","modified":1542454732000},{"_id":"themes/even/layout/_script/_analytics/google-analytics.swig","hash":"05d928829a52e901a3b772b870321ae2cfc66519","modified":1542454732000},{"_id":"themes/even/layout/_script/_comments/changyan.swig","hash":"caa7633fd47b103055b5a3b338830cc2a03bc1af","modified":1542454732000},{"_id":"themes/even/layout/_script/_comments/disqus.swig","hash":"0502145777d65515249680d3e4611f249e3d9ff8","modified":1542454732000},{"_id":"themes/even/layout/_script/_comments/livere.swig","hash":"c5cbbd3fe24ef3f541c4cd1524f7903c5c07037b","modified":1542454732000},{"_id":"themes/even/source/css/_common/_animation.scss","hash":"f32d2444f0ab4dcb8b811ae1bccae6073f21a988","modified":1542454732000},{"_id":"themes/even/source/css/_common/_normalize.scss","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1542454732000},{"_id":"themes/even/source/css/_common/_utils.scss","hash":"9ec5b1f6cf47260eba2729ff4931111b808644f0","modified":1542454732000},{"_id":"themes/even/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_archive.scss","hash":"c0cd7dc3462f7726428a30f5852fcf5577df5961","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_back-to-top.scss","hash":"de94a4546dad90f588e902c9641d94b31fd6625b","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_categories.scss","hash":"96f47000d25ef4e0e948f8f43fa4e2983ff0d746","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_footer.scss","hash":"76f3a72440be8aa1e93d8ddc5ea958777d1545ab","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_header.scss","hash":"4a3e92feef33bed0021f1a65a801c24ee7d5946f","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_iconfont.scss","hash":"6effdc886469ee76f3c66451ef4b04baaecd48ef","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_mobile.scss","hash":"0d1c60bd92f8e5db01e7843934251152ec4d6d44","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_nprogress.scss","hash":"6a3ed904b45cbeecfbf632627ad647718bf64c22","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_pagination.scss","hash":"b24db39534e180ebcebba2e81d91d9f1d534eea1","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_post.scss","hash":"655e8f56328a220b64d54c400990165a015fecd9","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_slideout.scss","hash":"e4820a42698f647a824575b234835b9ce4ac4797","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_tags.scss","hash":"fb4bf54b34291d5b72598a7ba4d3e370c8ad9383","modified":1542454732000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1542454732000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1542454732000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1542454732000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1542454732000},{"_id":"themes/even/source/js/src/even.js","hash":"6df9325a443743b2eb55481f5ac86180e142c2c2","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1542454732000},{"_id":"themes/even/source/lib/nprogress/nprogress.min.css","hash":"79a4f6785c09b8546a37f927e4a5d89af7156171","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1542454732000},{"_id":"themes/even/source/lib/nprogress/nprogress.min.js","hash":"3cca20b36156d9974312555d55db3fed194a3d04","modified":1542454732000},{"_id":"themes/even/source/lib/pjax/jquery.pjax.min.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1542454732000},{"_id":"themes/even/source/lib/slideout/slideout.js","hash":"81ec76a63f6f4bbdfc801d822182ab8afa9068fe","modified":1542454732000},{"_id":"themes/even/source/lib/slideout/slideout.min.js","hash":"7166ed307b771398a593fc3d4f1c5d93fbbe19bb","modified":1542454732000},{"_id":"themes/even/.git/objects/pack/pack-875fd25dbb4e4387618e7979921a25ee2ff03500.idx","hash":"f7be79e968e86f061042306a7aef1e102e026e75","modified":1542454732000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1542454732000},{"_id":"themes/even/source/lib/jquery/jquery.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1542454732000},{"_id":"themes/even/.git/logs/refs/heads/master","hash":"ee4ddf4a9da0947414be08d94bf1cbf9f56fba27","modified":1542454732000},{"_id":"themes/even/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_footer/_copyright.scss","hash":"afbc0f90c674e5cd5fd7509eb1296d60b999d4e1","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_footer/_social.scss","hash":"bca6a1036951c2475278bfbd3a5ce51ff861e9a3","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_header/_logo.scss","hash":"109073dde15146d835bf06faa2f256d1ac658315","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_header/_menu.scss","hash":"454214ab2b5a0ca17d6872068c52bfd01ac02fdc","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_post/_code.scss","hash":"cff6c1a599a4bb7c55b502ea09849c1286483644","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_post/_content.scss","hash":"0b3f703bad0159f9d68988360176c0ab3b63117d","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_post/_footer.scss","hash":"9f2ab0ac20b2a8bfd315febd387c399f72f43d10","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_post/_copyright.scss","hash":"71d949b053b0176621fdba5dc1e2e740f60b467d","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_post/_header.scss","hash":"f655fc254804e59d1426471f41127f26d06432b6","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_post/_toc.scss","hash":"5806ce8d5c4e2d70e12e03ab48327bdebc68c67b","modified":1542454732000},{"_id":"themes/even/source/css/_partial/_post/_reward.scss","hash":"66ec9faa27ed879dc9a2ca59c73ed6bfd5e61dcd","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542454732000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1542454732000},{"_id":"themes/even/.git/logs/refs/remotes/origin/HEAD","hash":"ee4ddf4a9da0947414be08d94bf1cbf9f56fba27","modified":1542454732000},{"_id":"themes/even/.git/objects/pack/pack-875fd25dbb4e4387618e7979921a25ee2ff03500.pack","hash":"bf1196a007aaa2b599bb82d49e88b61f4f2373d2","modified":1542454732000},{"_id":"public/2018/11/17/java-books/index.html","hash":"87b991fc2915779be8b554905e5da5d4ad66a5fe","modified":1542464701336},{"_id":"public/archives/index.html","hash":"1b91d1565e1ada0b26f298d67779b0c6631deafa","modified":1542531366162},{"_id":"public/archives/2018/index.html","hash":"804ed6aa6e62f8bbb54b9e186ec1e40b01bfb195","modified":1542531366163},{"_id":"public/archives/2018/11/index.html","hash":"94704cb96972179da3c25b4ed869e52b304ec495","modified":1542531366163},{"_id":"public/2018/11/17/distributed-id/index.html","hash":"436206bdc4191016973c4f5b619c548f01a2018f","modified":1542531366163},{"_id":"public/2018/11/17/agent-mock/index.html","hash":"8a4f0a7c7e4597dddb1e45838bf169957fd8dffd","modified":1542464701337},{"_id":"public/2018/11/17/pegjs-document/index.html","hash":"8de9c3d90c2c49cc3d3a73f5520ec587ba38cee9","modified":1542464701337},{"_id":"public/index.html","hash":"a9380796682fefcd245d2492e3d8602da36d2183","modified":1542531366163},{"_id":"public/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1542464701340},{"_id":"public/robots.txt","hash":"eed1ebad39b24e7942fcaf8f27da7487eb9f956e","modified":1542464701340},{"_id":"public/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1542464701340},{"_id":"public/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1542464701341},{"_id":"public/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1542464701341},{"_id":"public/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542464701341},{"_id":"public/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1542464701341},{"_id":"public/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542464701341},{"_id":"public/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542464701341},{"_id":"public/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542464701341},{"_id":"public/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542464701341},{"_id":"public/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542464701341},{"_id":"public/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542464701341},{"_id":"public/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1542464701348},{"_id":"public/js/src/even.js","hash":"6df9325a443743b2eb55481f5ac86180e142c2c2","modified":1542464701356},{"_id":"public/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1542464701356},{"_id":"public/lib/nprogress/nprogress.min.css","hash":"79a4f6785c09b8546a37f927e4a5d89af7156171","modified":1542464701356},{"_id":"public/lib/nprogress/nprogress.min.js","hash":"3cca20b36156d9974312555d55db3fed194a3d04","modified":1542464701356},{"_id":"public/lib/pjax/jquery.pjax.min.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1542464701356},{"_id":"public/lib/slideout/slideout.min.js","hash":"7166ed307b771398a593fc3d4f1c5d93fbbe19bb","modified":1542464701356},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1542464701356},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1542464701356},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542464701357},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542464701357},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1542464701357},{"_id":"public/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1542464701357},{"_id":"public/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1542464701357},{"_id":"public/lib/slideout/slideout.js","hash":"81ec76a63f6f4bbdfc801d822182ab8afa9068fe","modified":1542464701357},{"_id":"public/lib/jquery/jquery.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1542464701357},{"_id":"public/css/style.css","hash":"8ce6cae77844ff45129e764350043a376f7c90d1","modified":1542464701405},{"_id":"source/_posts/test.md","hash":"dc7a5cc1cd3bd61d13d5f4e2d03ca7cfd0f377e0","modified":1542531362000},{"_id":"public/2018/11/18/test/index.html","hash":"b0187157d2b54b0a1dd9f4d6568481fbb102c90d","modified":1542531366162}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"高并发无锁无IO等待分布式ID生成方案","_content":"\n# A)\n网络上现在有很多的分布式ID生成算法, 各大厂商也开源了自己的分布式id生成算法. 前段时间项目里有个生成唯一id的需求, 思考了一下, 将flick的id生成方案和Twitter的id生成算法结合到一起, 写了个小算法, 也算是站在巨人的肩膀上做了点小东西, lol\n\n# B)\n原理大致是这样的, 利用mysql insert来计算出集群中某个节点处于集群中的位置, 算出serverId, 然后利用雪花算法在该id上生成分布式id.\n\n目前的实现是采用long来进行存储的, 因此只能在生成时间维度, 节点数量, 和每毫秒内生成的数量上进行调节, 如果你们可以存储字符串的话, 那么可以拓展一下该算法, 加大时间和空间的容量.\n\n# C)\n算法实现\n```java\n/**\n * ID 生成器\n * <p>\n * 整个ID算法很简单,\n * 1. 参考Flickr ID生成算法, 使用MYSQL获得一个自增ID, 然后对ID取模, 算出一个服务器ID\n * 2. 参考Twitter的雪花算法, 算出一个long型ID\n * <p>\n * 该算法保证在30年内, 6万台机器, 单机每秒可以产出128, 000个不重复ID\n * <p>\n * <p>\n * CREATE TABLE `account_server_id` (\n * `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n * `stub` char(1) DEFAULT NULL,\n * PRIMARY KEY (`id`),\n * UNIQUE KEY `stub` (`stub`)\n * ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\n * <p>\n * <p>\n * |1, 000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0 |000, 0000, 0000, 0000, 0 |000, 0000           |\n * | |                   时间戳(40位)                                |   服务器ID(16位)         | 单个时间戳内的Id(7位) |\n */\n@Service\npublic class IDGeneratorService implements CommandLineRunner {\n\n    private static final Logger LOG = LoggerFactory.getLogger(IDGeneratorService.class);\n\n    // 时间戳从哪一年开始计时\n    private static final int START_YEAR = 2018;\n\n    // 时间取40位, 保证ID34年内不会重复\n    private static final int timeBitsSize = 40;\n    private static final int serverIdBitsSize = 16;\n    private static final int countBitsSize = 7;\n\n    private long maxIdPerMill;\n\n    // 时间开始时间戳, 相当于System.currentTimeMillis()的1970年\n    private long startDateTime;\n    // 服务器ID表示位, 在集群中表示一个节点\n    private long serverIdBits;\n    // 单机中, 某个时刻生长得id\n    private long currentID;\n\n    private long maxTime;\n\n    private long lastGenerateTime = System.currentTimeMillis();\n    private Object lock = new Object();\n\n    @Resource\n    private AccountServerIdMapper accountServerIdMapper;\n\n    public void init() {\n        // 1. 计算出开始生成ID的起始时间戳\n        LocalDateTime start = LocalDateTime.of(START_YEAR, 1, 1, 0, 0);\n        startDateTime = start.toInstant(ZoneOffset.of(\"+8\")).toEpochMilli();\n\n        // 2. 算出支持最大年限的时间\n        maxTime = ((Double) Math.pow(2, timeBitsSize)).longValue();\n\n        // 3. 算出每毫秒能产出多少ID\n        maxIdPerMill = ((Double) Math.pow(2, countBitsSize)).longValue();\n\n        /**\n         * 4. 根据Mysql自增ID取模, 算出每个服务器ID, 在生产环境中, 应该保证服务器数量是该值的一半, 如此一来就可以避免, 服务器集群整体\n         * 重启时, 不会拿到与重启之前的服务器相同的Id\n         * 这个值的计算是为了适应这种场景, 在服务器灰度上线的时候, 有可能是原来的服务器还没有关闭, 但是新的服务器已经起来了, 此时会有俩套\n         * 服务器同时在处理业务逻辑, 那么它们就有可能拿到一样的服务器ID, 从而导致产生一样的ID号\n         */\n        long serverSize = ((Double) Math.pow(2, serverIdBitsSize)).longValue();\n\n        AccountServerId accountServerId = new AccountServerId();\n        accountServerIdMapper.nextId(accountServerId);\n        long serverId = (int) (accountServerId.getId() % serverSize);\n\n        /**\n         * 5. 算出每个服务器ID在long类型中的数据位置, 然后缓存起来\n         */\n        serverIdBits = (serverId << (countBitsSize));\n\n        LOG.info(\"[ID生成器] 开始时间:{}, 时间戳:{} \", new Date(startDateTime), startDateTime);\n        LOG.info(\"[ID生成器] 结束时间:{}, 时间戳:{} \", new Date(startDateTime + maxTime), maxTime);\n        LOG.info(\"[ID生成器] 每毫秒生成最大ID数:{} \", maxIdPerMill);\n        LOG.info(\"[ID生成器] 当前serverId: {}, serverIdSize:{}\", serverId, serverSize);\n        LOG.info(\"[ID生成器] serverIdBits: {}\", Long.toBinaryString(serverIdBits));\n    }\n\n    /**\n     * 生成一个64位的GUID\n     * <p>\n     * 在next()方法中, 没有使用任何的对象, 如此一来就可以减轻GC的压力.\n     *\n     * @return\n     */\n    public long next() {\n\n        synchronized (lock) {\n            long curTime = System.currentTimeMillis() - startDateTime;\n            if (curTime >= maxTime) {\n\t            LOG.error(\"[ID生成器] 超过负载, {}, {}！返回 -1\", curTime, maxTime);\n                return -1;\n            }\n\n            if (lastGenerateTime != curTime) {\n                currentID = 0;\n            } else {\n\n                if (currentID >= maxIdPerMill) {\n\t                LOG.error(\"[ID生成器] 同一毫秒[\" + curTime + \"]内生成\" + currentID + \"个ID！返回 -1\");\n                    return -1;\n                }\n\n                ++currentID;\n            }\n\n            lastGenerateTime = curTime;\n            long gid = (curTime << countBitsSize + serverIdBitsSize) | serverIdBits;\n            gid |= currentID;\n\n            return gid;\n        }\n    }\n\n    public String nextStrId() {\n        return String.valueOf(next());\n    }\n\n    public long tryNextId() {\n        for (int i = 0; i < 1000; i++) {\n\n            long start = System.currentTimeMillis();\n            long id = next();\n            long diff = System.currentTimeMillis() - start;\n            if (diff > 3) {\n                String tid = Thread.currentThread().getName();\n                LOG.warn(\"[ID生成器] 线程{} 生成ID: {} 大于3毫秒: {}\", tid, id, diff);\n            }\n\n            if (id == -1) {\n                try {\n//\t\t\t\t\tLOG.error(\"[ID生成器] 生成ID为-1, 可能超过每毫秒内生成最大数量, 等待1毫秒\");\n                    TimeUnit.MILLISECONDS.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                continue;\n            }\n            return id;\n        }\n        return -1;\n    }\n\n    public String tryNextStrId() {\n        return String.valueOf(tryNextId());\n    }\n\n    @Override\n    public void run(String... args) throws Exception {\n        init();\n    }\n}\n```\nmybatis\n```java\n@Mapper\npublic interface AccountServerIdMapper {\n\n    @Insert(\"REPLACE INTO server_id (stub) VALUES ('a');\")\n    @SelectKey(statement = \"SELECT LAST_INSERT_ID()\", keyProperty = \"id\", before = false, resultType = Long.class)\n    Long nextId(AccountServerId accountServerId);\n\n}\n```\nSQL\n```sql\nCREATE TABLE `server_id` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `stub` char(1) DEFAULT NULL,\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `stub` (`stub`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\n```\n测试\n```java\n@RunWith(JMockit.class)\npublic class IDGeneratorUtilTest {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(IDGeneratorUtilTest.class);\n\n\tprivate static final int MAX_TIMES = 2000000;\n\tprivate static final int PRINT_TIMES = 100;\n\n\t@Tested\n\tprivate IDGeneratorService idGeneratorUtil;\n\n\t@Injectable\n\tprivate AccountServerIdMapper accountServerIdMapper;\n\n\t/**\n\t * 21026 [main] DEBUG c.f.l.service.IDGeneratorUtilTest - 20506 毫秒内生成 2000000 个ID\n\t * <p>\n\t * 单线程的情况下, 在MacBook Pro上是每毫秒钟生成 97 个id\n\t */\n\t@Test\n\tpublic void testOneServerIdGenerate() {\n\t\tnew Expectations() {\n\t\t\t{\n\t\t\t\taccountServerIdMapper.nextId((AccountServerId) any);\n\t\t\t\tresult = 2;\n\t\t\t}\n\t\t};\n\t\tidGeneratorUtil.init();\n\n\t\tSet<Long> ids = new HashSet<>();\n\n\t\tlong start = System.currentTimeMillis();\n\n\t\tfor (int i = 0; i < MAX_TIMES; i++) {\n\t\t\tlong id = idGeneratorUtil.tryNextId();\n\t\t\tif (ids.contains(id)) {\n\t\t\t\tSystem.out.println(id);\n\t\t\t}\n\t\t\tids.add(id);\n\t\t}\n\t\tlogger.debug((System.currentTimeMillis() - start) + \" 毫秒内生成 \" + ids.size() + \" 个ID\");\n\t\tAssert.assertEquals(ids.size(), MAX_TIMES);\n\n\t\tObject[] idArray = ids.toArray();\n\t\tfor (int i = 0; i < PRINT_TIMES; i++) {\n\t\t\tlogger.debug(idArray[i] + \" : \" + Long.toBinaryString((Long) idArray[i]));\n\t\t}\n\t}\n\n\t/**\n\t * 207703 [Thread-7] DEBUG c.f.l.service.IDGeneratorUtilTest - 207136 毫秒内生成 2000000 个ID\n\t * 208031 [Thread-3] DEBUG c.f.l.service.IDGeneratorUtilTest - 207465 毫秒内生成 2000000 个ID\n\t * 208626 [Thread-10] DEBUG c.f.l.service.IDGeneratorUtilTest - 208059 毫秒内生成 2000000 个ID\n\t * 208630 [Thread-9] DEBUG c.f.l.service.IDGeneratorUtilTest - 208063 毫秒内生成 2000000 个ID\n\t * 209153 [Thread-6] DEBUG c.f.l.service.IDGeneratorUtilTest - 208586 毫秒内生成 2000000 个ID\n\t * 209170 [Thread-5] DEBUG c.f.l.service.IDGeneratorUtilTest - 208603 毫秒内生成 2000000 个ID\n\t * 209373 [Thread-2] DEBUG c.f.l.service.IDGeneratorUtilTest - 208807 毫秒内生成 2000000 个ID\n\t * 209412 [Thread-1] DEBUG c.f.l.service.IDGeneratorUtilTest - 208846 毫秒内生成 2000000 个ID\n\t * 209508 [Thread-4] DEBUG c.f.l.service.IDGeneratorUtilTest - 208941 毫秒内生成 2000000 个ID\n\t * 209536 [Thread-8] DEBUG c.f.l.service.IDGeneratorUtilTest - 208969 毫秒内生成 2000000 个ID\n\t * <p>\n\t * 多线程的情况下, 在MacBook Pro上是每毫秒钟生成 9 个id, 可见由于锁的竞争, 产生的影响还是非常大的\n\t */\n\t@Test\n\tpublic void testMutilServerIdGenerate() {\n\t\tnew Expectations() {\n\t\t\t{\n\t\t\t\taccountServerIdMapper.nextId((AccountServerId) any);\n\t\t\t\tresult = 2;\n\t\t\t}\n\t\t};\n\t\tidGeneratorUtil.init();\n\n\t\tRunnable runnable = () -> {\n\t\t\tSet<Long> ids = new HashSet<>();\n\n\t\t\tlong start = System.currentTimeMillis();\n\n\t\t\tfor (int i = 0; i < MAX_TIMES; i++) {\n\t\t\t\tlong id = idGeneratorUtil.tryNextId();\n\t\t\t\tids.add(id);\n\t\t\t}\n\t\t\tlogger.debug((System.currentTimeMillis() - start) + \" 毫秒内生成 \" + ids.size() + \" 个ID\");\n\t\t\tAssert.assertEquals(ids.size(), MAX_TIMES);\n\t\t};\n\n\t\tList<Thread> list = new ArrayList<>();\n\t\tint cpus = Runtime.getRuntime().availableProcessors() + 2;\n\t\tlogger.debug(\"CPU : \" + cpus);\n\n\t\tfor (int i = 0; i < cpus; i++) {\n\t\t\tThread thread = new Thread(runnable);\n\t\t\tlist.add(thread);\n\t\t\tthread.start();\n\t\t}\n\n\t\tfor (Thread thread : list) {\n\t\t\ttry {\n\t\t\t\tthread.join();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t}\n}\n```","source":"_posts/distributed-id.md","raw":"---\ntitle: 高并发无锁无IO等待分布式ID生成方案\n---\n\n# A)\n网络上现在有很多的分布式ID生成算法, 各大厂商也开源了自己的分布式id生成算法. 前段时间项目里有个生成唯一id的需求, 思考了一下, 将flick的id生成方案和Twitter的id生成算法结合到一起, 写了个小算法, 也算是站在巨人的肩膀上做了点小东西, lol\n\n# B)\n原理大致是这样的, 利用mysql insert来计算出集群中某个节点处于集群中的位置, 算出serverId, 然后利用雪花算法在该id上生成分布式id.\n\n目前的实现是采用long来进行存储的, 因此只能在生成时间维度, 节点数量, 和每毫秒内生成的数量上进行调节, 如果你们可以存储字符串的话, 那么可以拓展一下该算法, 加大时间和空间的容量.\n\n# C)\n算法实现\n```java\n/**\n * ID 生成器\n * <p>\n * 整个ID算法很简单,\n * 1. 参考Flickr ID生成算法, 使用MYSQL获得一个自增ID, 然后对ID取模, 算出一个服务器ID\n * 2. 参考Twitter的雪花算法, 算出一个long型ID\n * <p>\n * 该算法保证在30年内, 6万台机器, 单机每秒可以产出128, 000个不重复ID\n * <p>\n * <p>\n * CREATE TABLE `account_server_id` (\n * `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n * `stub` char(1) DEFAULT NULL,\n * PRIMARY KEY (`id`),\n * UNIQUE KEY `stub` (`stub`)\n * ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\n * <p>\n * <p>\n * |1, 000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0 |000, 0000, 0000, 0000, 0 |000, 0000           |\n * | |                   时间戳(40位)                                |   服务器ID(16位)         | 单个时间戳内的Id(7位) |\n */\n@Service\npublic class IDGeneratorService implements CommandLineRunner {\n\n    private static final Logger LOG = LoggerFactory.getLogger(IDGeneratorService.class);\n\n    // 时间戳从哪一年开始计时\n    private static final int START_YEAR = 2018;\n\n    // 时间取40位, 保证ID34年内不会重复\n    private static final int timeBitsSize = 40;\n    private static final int serverIdBitsSize = 16;\n    private static final int countBitsSize = 7;\n\n    private long maxIdPerMill;\n\n    // 时间开始时间戳, 相当于System.currentTimeMillis()的1970年\n    private long startDateTime;\n    // 服务器ID表示位, 在集群中表示一个节点\n    private long serverIdBits;\n    // 单机中, 某个时刻生长得id\n    private long currentID;\n\n    private long maxTime;\n\n    private long lastGenerateTime = System.currentTimeMillis();\n    private Object lock = new Object();\n\n    @Resource\n    private AccountServerIdMapper accountServerIdMapper;\n\n    public void init() {\n        // 1. 计算出开始生成ID的起始时间戳\n        LocalDateTime start = LocalDateTime.of(START_YEAR, 1, 1, 0, 0);\n        startDateTime = start.toInstant(ZoneOffset.of(\"+8\")).toEpochMilli();\n\n        // 2. 算出支持最大年限的时间\n        maxTime = ((Double) Math.pow(2, timeBitsSize)).longValue();\n\n        // 3. 算出每毫秒能产出多少ID\n        maxIdPerMill = ((Double) Math.pow(2, countBitsSize)).longValue();\n\n        /**\n         * 4. 根据Mysql自增ID取模, 算出每个服务器ID, 在生产环境中, 应该保证服务器数量是该值的一半, 如此一来就可以避免, 服务器集群整体\n         * 重启时, 不会拿到与重启之前的服务器相同的Id\n         * 这个值的计算是为了适应这种场景, 在服务器灰度上线的时候, 有可能是原来的服务器还没有关闭, 但是新的服务器已经起来了, 此时会有俩套\n         * 服务器同时在处理业务逻辑, 那么它们就有可能拿到一样的服务器ID, 从而导致产生一样的ID号\n         */\n        long serverSize = ((Double) Math.pow(2, serverIdBitsSize)).longValue();\n\n        AccountServerId accountServerId = new AccountServerId();\n        accountServerIdMapper.nextId(accountServerId);\n        long serverId = (int) (accountServerId.getId() % serverSize);\n\n        /**\n         * 5. 算出每个服务器ID在long类型中的数据位置, 然后缓存起来\n         */\n        serverIdBits = (serverId << (countBitsSize));\n\n        LOG.info(\"[ID生成器] 开始时间:{}, 时间戳:{} \", new Date(startDateTime), startDateTime);\n        LOG.info(\"[ID生成器] 结束时间:{}, 时间戳:{} \", new Date(startDateTime + maxTime), maxTime);\n        LOG.info(\"[ID生成器] 每毫秒生成最大ID数:{} \", maxIdPerMill);\n        LOG.info(\"[ID生成器] 当前serverId: {}, serverIdSize:{}\", serverId, serverSize);\n        LOG.info(\"[ID生成器] serverIdBits: {}\", Long.toBinaryString(serverIdBits));\n    }\n\n    /**\n     * 生成一个64位的GUID\n     * <p>\n     * 在next()方法中, 没有使用任何的对象, 如此一来就可以减轻GC的压力.\n     *\n     * @return\n     */\n    public long next() {\n\n        synchronized (lock) {\n            long curTime = System.currentTimeMillis() - startDateTime;\n            if (curTime >= maxTime) {\n\t            LOG.error(\"[ID生成器] 超过负载, {}, {}！返回 -1\", curTime, maxTime);\n                return -1;\n            }\n\n            if (lastGenerateTime != curTime) {\n                currentID = 0;\n            } else {\n\n                if (currentID >= maxIdPerMill) {\n\t                LOG.error(\"[ID生成器] 同一毫秒[\" + curTime + \"]内生成\" + currentID + \"个ID！返回 -1\");\n                    return -1;\n                }\n\n                ++currentID;\n            }\n\n            lastGenerateTime = curTime;\n            long gid = (curTime << countBitsSize + serverIdBitsSize) | serverIdBits;\n            gid |= currentID;\n\n            return gid;\n        }\n    }\n\n    public String nextStrId() {\n        return String.valueOf(next());\n    }\n\n    public long tryNextId() {\n        for (int i = 0; i < 1000; i++) {\n\n            long start = System.currentTimeMillis();\n            long id = next();\n            long diff = System.currentTimeMillis() - start;\n            if (diff > 3) {\n                String tid = Thread.currentThread().getName();\n                LOG.warn(\"[ID生成器] 线程{} 生成ID: {} 大于3毫秒: {}\", tid, id, diff);\n            }\n\n            if (id == -1) {\n                try {\n//\t\t\t\t\tLOG.error(\"[ID生成器] 生成ID为-1, 可能超过每毫秒内生成最大数量, 等待1毫秒\");\n                    TimeUnit.MILLISECONDS.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                continue;\n            }\n            return id;\n        }\n        return -1;\n    }\n\n    public String tryNextStrId() {\n        return String.valueOf(tryNextId());\n    }\n\n    @Override\n    public void run(String... args) throws Exception {\n        init();\n    }\n}\n```\nmybatis\n```java\n@Mapper\npublic interface AccountServerIdMapper {\n\n    @Insert(\"REPLACE INTO server_id (stub) VALUES ('a');\")\n    @SelectKey(statement = \"SELECT LAST_INSERT_ID()\", keyProperty = \"id\", before = false, resultType = Long.class)\n    Long nextId(AccountServerId accountServerId);\n\n}\n```\nSQL\n```sql\nCREATE TABLE `server_id` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `stub` char(1) DEFAULT NULL,\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `stub` (`stub`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\n```\n测试\n```java\n@RunWith(JMockit.class)\npublic class IDGeneratorUtilTest {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(IDGeneratorUtilTest.class);\n\n\tprivate static final int MAX_TIMES = 2000000;\n\tprivate static final int PRINT_TIMES = 100;\n\n\t@Tested\n\tprivate IDGeneratorService idGeneratorUtil;\n\n\t@Injectable\n\tprivate AccountServerIdMapper accountServerIdMapper;\n\n\t/**\n\t * 21026 [main] DEBUG c.f.l.service.IDGeneratorUtilTest - 20506 毫秒内生成 2000000 个ID\n\t * <p>\n\t * 单线程的情况下, 在MacBook Pro上是每毫秒钟生成 97 个id\n\t */\n\t@Test\n\tpublic void testOneServerIdGenerate() {\n\t\tnew Expectations() {\n\t\t\t{\n\t\t\t\taccountServerIdMapper.nextId((AccountServerId) any);\n\t\t\t\tresult = 2;\n\t\t\t}\n\t\t};\n\t\tidGeneratorUtil.init();\n\n\t\tSet<Long> ids = new HashSet<>();\n\n\t\tlong start = System.currentTimeMillis();\n\n\t\tfor (int i = 0; i < MAX_TIMES; i++) {\n\t\t\tlong id = idGeneratorUtil.tryNextId();\n\t\t\tif (ids.contains(id)) {\n\t\t\t\tSystem.out.println(id);\n\t\t\t}\n\t\t\tids.add(id);\n\t\t}\n\t\tlogger.debug((System.currentTimeMillis() - start) + \" 毫秒内生成 \" + ids.size() + \" 个ID\");\n\t\tAssert.assertEquals(ids.size(), MAX_TIMES);\n\n\t\tObject[] idArray = ids.toArray();\n\t\tfor (int i = 0; i < PRINT_TIMES; i++) {\n\t\t\tlogger.debug(idArray[i] + \" : \" + Long.toBinaryString((Long) idArray[i]));\n\t\t}\n\t}\n\n\t/**\n\t * 207703 [Thread-7] DEBUG c.f.l.service.IDGeneratorUtilTest - 207136 毫秒内生成 2000000 个ID\n\t * 208031 [Thread-3] DEBUG c.f.l.service.IDGeneratorUtilTest - 207465 毫秒内生成 2000000 个ID\n\t * 208626 [Thread-10] DEBUG c.f.l.service.IDGeneratorUtilTest - 208059 毫秒内生成 2000000 个ID\n\t * 208630 [Thread-9] DEBUG c.f.l.service.IDGeneratorUtilTest - 208063 毫秒内生成 2000000 个ID\n\t * 209153 [Thread-6] DEBUG c.f.l.service.IDGeneratorUtilTest - 208586 毫秒内生成 2000000 个ID\n\t * 209170 [Thread-5] DEBUG c.f.l.service.IDGeneratorUtilTest - 208603 毫秒内生成 2000000 个ID\n\t * 209373 [Thread-2] DEBUG c.f.l.service.IDGeneratorUtilTest - 208807 毫秒内生成 2000000 个ID\n\t * 209412 [Thread-1] DEBUG c.f.l.service.IDGeneratorUtilTest - 208846 毫秒内生成 2000000 个ID\n\t * 209508 [Thread-4] DEBUG c.f.l.service.IDGeneratorUtilTest - 208941 毫秒内生成 2000000 个ID\n\t * 209536 [Thread-8] DEBUG c.f.l.service.IDGeneratorUtilTest - 208969 毫秒内生成 2000000 个ID\n\t * <p>\n\t * 多线程的情况下, 在MacBook Pro上是每毫秒钟生成 9 个id, 可见由于锁的竞争, 产生的影响还是非常大的\n\t */\n\t@Test\n\tpublic void testMutilServerIdGenerate() {\n\t\tnew Expectations() {\n\t\t\t{\n\t\t\t\taccountServerIdMapper.nextId((AccountServerId) any);\n\t\t\t\tresult = 2;\n\t\t\t}\n\t\t};\n\t\tidGeneratorUtil.init();\n\n\t\tRunnable runnable = () -> {\n\t\t\tSet<Long> ids = new HashSet<>();\n\n\t\t\tlong start = System.currentTimeMillis();\n\n\t\t\tfor (int i = 0; i < MAX_TIMES; i++) {\n\t\t\t\tlong id = idGeneratorUtil.tryNextId();\n\t\t\t\tids.add(id);\n\t\t\t}\n\t\t\tlogger.debug((System.currentTimeMillis() - start) + \" 毫秒内生成 \" + ids.size() + \" 个ID\");\n\t\t\tAssert.assertEquals(ids.size(), MAX_TIMES);\n\t\t};\n\n\t\tList<Thread> list = new ArrayList<>();\n\t\tint cpus = Runtime.getRuntime().availableProcessors() + 2;\n\t\tlogger.debug(\"CPU : \" + cpus);\n\n\t\tfor (int i = 0; i < cpus; i++) {\n\t\t\tThread thread = new Thread(runnable);\n\t\t\tlist.add(thread);\n\t\t\tthread.start();\n\t\t}\n\n\t\tfor (Thread thread : list) {\n\t\t\ttry {\n\t\t\t\tthread.join();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t}\n}\n```","slug":"distributed-id","published":1,"date":"2018-11-17T07:15:38.000Z","updated":"2018-11-17T12:12:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoljno5k0000uds6ug28pipq","content":"<h1 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A)\"></a>A)</h1><p>网络上现在有很多的分布式ID生成算法, 各大厂商也开源了自己的分布式id生成算法. 前段时间项目里有个生成唯一id的需求, 思考了一下, 将flick的id生成方案和Twitter的id生成算法结合到一起, 写了个小算法, 也算是站在巨人的肩膀上做了点小东西, lol</p>\n<h1 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B)\"></a>B)</h1><p>原理大致是这样的, 利用mysql insert来计算出集群中某个节点处于集群中的位置, 算出serverId, 然后利用雪花算法在该id上生成分布式id.</p>\n<p>目前的实现是采用long来进行存储的, 因此只能在生成时间维度, 节点数量, 和每毫秒内生成的数量上进行调节, 如果你们可以存储字符串的话, 那么可以拓展一下该算法, 加大时间和空间的容量.</p>\n<h1 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C)\"></a>C)</h1><p>算法实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ID 生成器</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 整个ID算法很简单,</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 参考Flickr ID生成算法, 使用MYSQL获得一个自增ID, 然后对ID取模, 算出一个服务器ID</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 参考Twitter的雪花算法, 算出一个long型ID</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 该算法保证在30年内, 6万台机器, 单机每秒可以产出128, 000个不重复ID</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * CREATE TABLE `account_server_id` (</span></span><br><span class=\"line\"><span class=\"comment\"> * `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"comment\"> * `stub` char(1) DEFAULT NULL,</span></span><br><span class=\"line\"><span class=\"comment\"> * PRIMARY KEY (`id`),</span></span><br><span class=\"line\"><span class=\"comment\"> * UNIQUE KEY `stub` (`stub`)</span></span><br><span class=\"line\"><span class=\"comment\"> * ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * |1, 000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0 |000, 0000, 0000, 0000, 0 |000, 0000           |</span></span><br><span class=\"line\"><span class=\"comment\"> * | |                   时间戳(40位)                                |   服务器ID(16位)         | 单个时间戳内的Id(7位) |</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IDGeneratorService</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG = LoggerFactory.getLogger(IDGeneratorService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 时间戳从哪一年开始计时</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> START_YEAR = <span class=\"number\">2018</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 时间取40位, 保证ID34年内不会重复</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> timeBitsSize = <span class=\"number\">40</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> serverIdBitsSize = <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> countBitsSize = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxIdPerMill;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 时间开始时间戳, 相当于System.currentTimeMillis()的1970年</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> startDateTime;</span><br><span class=\"line\">    <span class=\"comment\">// 服务器ID表示位, 在集群中表示一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> serverIdBits;</span><br><span class=\"line\">    <span class=\"comment\">// 单机中, 某个时刻生长得id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> currentID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lastGenerateTime = System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object lock = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AccountServerIdMapper accountServerIdMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 计算出开始生成ID的起始时间戳</span></span><br><span class=\"line\">        LocalDateTime start = LocalDateTime.of(START_YEAR, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        startDateTime = start.toInstant(ZoneOffset.of(<span class=\"string\">\"+8\"</span>)).toEpochMilli();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 算出支持最大年限的时间</span></span><br><span class=\"line\">        maxTime = ((Double) Math.pow(<span class=\"number\">2</span>, timeBitsSize)).longValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 算出每毫秒能产出多少ID</span></span><br><span class=\"line\">        maxIdPerMill = ((Double) Math.pow(<span class=\"number\">2</span>, countBitsSize)).longValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 4. 根据Mysql自增ID取模, 算出每个服务器ID, 在生产环境中, 应该保证服务器数量是该值的一半, 如此一来就可以避免, 服务器集群整体</span></span><br><span class=\"line\"><span class=\"comment\">         * 重启时, 不会拿到与重启之前的服务器相同的Id</span></span><br><span class=\"line\"><span class=\"comment\">         * 这个值的计算是为了适应这种场景, 在服务器灰度上线的时候, 有可能是原来的服务器还没有关闭, 但是新的服务器已经起来了, 此时会有俩套</span></span><br><span class=\"line\"><span class=\"comment\">         * 服务器同时在处理业务逻辑, 那么它们就有可能拿到一样的服务器ID, 从而导致产生一样的ID号</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> serverSize = ((Double) Math.pow(<span class=\"number\">2</span>, serverIdBitsSize)).longValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        AccountServerId accountServerId = <span class=\"keyword\">new</span> AccountServerId();</span><br><span class=\"line\">        accountServerIdMapper.nextId(accountServerId);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> serverId = (<span class=\"keyword\">int</span>) (accountServerId.getId() % serverSize);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 5. 算出每个服务器ID在long类型中的数据位置, 然后缓存起来</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        serverIdBits = (serverId &lt;&lt; (countBitsSize));</span><br><span class=\"line\"></span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"[ID生成器] 开始时间:&#123;&#125;, 时间戳:&#123;&#125; \"</span>, <span class=\"keyword\">new</span> Date(startDateTime), startDateTime);</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"[ID生成器] 结束时间:&#123;&#125;, 时间戳:&#123;&#125; \"</span>, <span class=\"keyword\">new</span> Date(startDateTime + maxTime), maxTime);</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"[ID生成器] 每毫秒生成最大ID数:&#123;&#125; \"</span>, maxIdPerMill);</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"[ID生成器] 当前serverId: &#123;&#125;, serverIdSize:&#123;&#125;\"</span>, serverId, serverSize);</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"[ID生成器] serverIdBits: &#123;&#125;\"</span>, Long.toBinaryString(serverIdBits));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成一个64位的GUID</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 在next()方法中, 没有使用任何的对象, 如此一来就可以减轻GC的压力.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> curTime = System.currentTimeMillis() - startDateTime;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curTime &gt;= maxTime) &#123;</span><br><span class=\"line\">\t            LOG.error(<span class=\"string\">\"[ID生成器] 超过负载, &#123;&#125;, &#123;&#125;！返回 -1\"</span>, curTime, maxTime);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastGenerateTime != curTime) &#123;</span><br><span class=\"line\">                currentID = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentID &gt;= maxIdPerMill) &#123;</span><br><span class=\"line\">\t                LOG.error(<span class=\"string\">\"[ID生成器] 同一毫秒[\"</span> + curTime + <span class=\"string\">\"]内生成\"</span> + currentID + <span class=\"string\">\"个ID！返回 -1\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                ++currentID;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            lastGenerateTime = curTime;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> gid = (curTime &lt;&lt; countBitsSize + serverIdBitsSize) | serverIdBits;</span><br><span class=\"line\">            gid |= currentID;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> gid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">nextStrId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">tryNextId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> id = next();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> diff = System.currentTimeMillis() - start;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                String tid = Thread.currentThread().getName();</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"[ID生成器] 线程&#123;&#125; 生成ID: &#123;&#125; 大于3毫秒: &#123;&#125;\"</span>, tid, id, diff);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (id == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\t\tLOG.error(\"[ID生成器] 生成ID为-1, 可能超过每毫秒内生成最大数量, 等待1毫秒\");</span></span><br><span class=\"line\">                    TimeUnit.MILLISECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">tryNextStrId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(tryNextId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>mybatis<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccountServerIdMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span>(<span class=\"string\">\"REPLACE INTO server_id (stub) VALUES ('a');\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@SelectKey</span>(statement = <span class=\"string\">\"SELECT LAST_INSERT_ID()\"</span>, keyProperty = <span class=\"string\">\"id\"</span>, before = <span class=\"keyword\">false</span>, resultType = Long.class)</span><br><span class=\"line\">    <span class=\"function\">Long <span class=\"title\">nextId</span><span class=\"params\">(AccountServerId accountServerId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>SQL<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`server_id`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">`stub`</span> <span class=\"built_in\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`create_time`</span> datetime <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'创建时间'</span>,</span><br><span class=\"line\">  <span class=\"string\">`update_time`</span> datetime <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`stub`</span> (<span class=\"string\">`stub`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"number\">1</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(JMockit.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IDGeneratorUtilTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(IDGeneratorUtilTest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_TIMES = <span class=\"number\">2000000</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PRINT_TIMES = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Tested</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> IDGeneratorService idGeneratorUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Injectable</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> AccountServerIdMapper accountServerIdMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 21026 [main] DEBUG c.f.l.service.IDGeneratorUtilTest - 20506 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * 单线程的情况下, 在MacBook Pro上是每毫秒钟生成 97 个id</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testOneServerIdGenerate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Expectations() &#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\taccountServerIdMapper.nextId((AccountServerId) any);</span><br><span class=\"line\">\t\t\t\tresult = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tidGeneratorUtil.init();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSet&lt;Long&gt; ids = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX_TIMES; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> id = idGeneratorUtil.tryNextId();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ids.contains(id)) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(id);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tids.add(id);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlogger.debug((System.currentTimeMillis() - start) + <span class=\"string\">\" 毫秒内生成 \"</span> + ids.size() + <span class=\"string\">\" 个ID\"</span>);</span><br><span class=\"line\">\t\tAssert.assertEquals(ids.size(), MAX_TIMES);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tObject[] idArray = ids.toArray();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; PRINT_TIMES; i++) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(idArray[i] + <span class=\"string\">\" : \"</span> + Long.toBinaryString((Long) idArray[i]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 207703 [Thread-7] DEBUG c.f.l.service.IDGeneratorUtilTest - 207136 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 208031 [Thread-3] DEBUG c.f.l.service.IDGeneratorUtilTest - 207465 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 208626 [Thread-10] DEBUG c.f.l.service.IDGeneratorUtilTest - 208059 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 208630 [Thread-9] DEBUG c.f.l.service.IDGeneratorUtilTest - 208063 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209153 [Thread-6] DEBUG c.f.l.service.IDGeneratorUtilTest - 208586 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209170 [Thread-5] DEBUG c.f.l.service.IDGeneratorUtilTest - 208603 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209373 [Thread-2] DEBUG c.f.l.service.IDGeneratorUtilTest - 208807 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209412 [Thread-1] DEBUG c.f.l.service.IDGeneratorUtilTest - 208846 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209508 [Thread-4] DEBUG c.f.l.service.IDGeneratorUtilTest - 208941 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209536 [Thread-8] DEBUG c.f.l.service.IDGeneratorUtilTest - 208969 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多线程的情况下, 在MacBook Pro上是每毫秒钟生成 9 个id, 可见由于锁的竞争, 产生的影响还是非常大的</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMutilServerIdGenerate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Expectations() &#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\taccountServerIdMapper.nextId((AccountServerId) any);</span><br><span class=\"line\">\t\t\t\tresult = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tidGeneratorUtil.init();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tRunnable runnable = () -&gt; &#123;</span><br><span class=\"line\">\t\t\tSet&lt;Long&gt; ids = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX_TIMES; i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> id = idGeneratorUtil.tryNextId();</span><br><span class=\"line\">\t\t\t\tids.add(id);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tlogger.debug((System.currentTimeMillis() - start) + <span class=\"string\">\" 毫秒内生成 \"</span> + ids.size() + <span class=\"string\">\" 个ID\"</span>);</span><br><span class=\"line\">\t\t\tAssert.assertEquals(ids.size(), MAX_TIMES);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;Thread&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cpus = Runtime.getRuntime().availableProcessors() + <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">\"CPU : \"</span> + cpus);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cpus; i++) &#123;</span><br><span class=\"line\">\t\t\tThread thread = <span class=\"keyword\">new</span> Thread(runnable);</span><br><span class=\"line\">\t\t\tlist.add(thread);</span><br><span class=\"line\">\t\t\tthread.start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Thread thread : list) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tthread.join();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A)\"></a>A)</h1><p>网络上现在有很多的分布式ID生成算法, 各大厂商也开源了自己的分布式id生成算法. 前段时间项目里有个生成唯一id的需求, 思考了一下, 将flick的id生成方案和Twitter的id生成算法结合到一起, 写了个小算法, 也算是站在巨人的肩膀上做了点小东西, lol</p>\n<h1 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B)\"></a>B)</h1><p>原理大致是这样的, 利用mysql insert来计算出集群中某个节点处于集群中的位置, 算出serverId, 然后利用雪花算法在该id上生成分布式id.</p>\n<p>目前的实现是采用long来进行存储的, 因此只能在生成时间维度, 节点数量, 和每毫秒内生成的数量上进行调节, 如果你们可以存储字符串的话, 那么可以拓展一下该算法, 加大时间和空间的容量.</p>\n<h1 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C)\"></a>C)</h1><p>算法实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ID 生成器</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 整个ID算法很简单,</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 参考Flickr ID生成算法, 使用MYSQL获得一个自增ID, 然后对ID取模, 算出一个服务器ID</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 参考Twitter的雪花算法, 算出一个long型ID</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 该算法保证在30年内, 6万台机器, 单机每秒可以产出128, 000个不重复ID</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * CREATE TABLE `account_server_id` (</span></span><br><span class=\"line\"><span class=\"comment\"> * `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"comment\"> * `stub` char(1) DEFAULT NULL,</span></span><br><span class=\"line\"><span class=\"comment\"> * PRIMARY KEY (`id`),</span></span><br><span class=\"line\"><span class=\"comment\"> * UNIQUE KEY `stub` (`stub`)</span></span><br><span class=\"line\"><span class=\"comment\"> * ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * |1, 000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0 |000, 0000, 0000, 0000, 0 |000, 0000           |</span></span><br><span class=\"line\"><span class=\"comment\"> * | |                   时间戳(40位)                                |   服务器ID(16位)         | 单个时间戳内的Id(7位) |</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IDGeneratorService</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG = LoggerFactory.getLogger(IDGeneratorService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 时间戳从哪一年开始计时</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> START_YEAR = <span class=\"number\">2018</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 时间取40位, 保证ID34年内不会重复</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> timeBitsSize = <span class=\"number\">40</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> serverIdBitsSize = <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> countBitsSize = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxIdPerMill;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 时间开始时间戳, 相当于System.currentTimeMillis()的1970年</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> startDateTime;</span><br><span class=\"line\">    <span class=\"comment\">// 服务器ID表示位, 在集群中表示一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> serverIdBits;</span><br><span class=\"line\">    <span class=\"comment\">// 单机中, 某个时刻生长得id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> currentID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> maxTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lastGenerateTime = System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object lock = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AccountServerIdMapper accountServerIdMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 计算出开始生成ID的起始时间戳</span></span><br><span class=\"line\">        LocalDateTime start = LocalDateTime.of(START_YEAR, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        startDateTime = start.toInstant(ZoneOffset.of(<span class=\"string\">\"+8\"</span>)).toEpochMilli();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 算出支持最大年限的时间</span></span><br><span class=\"line\">        maxTime = ((Double) Math.pow(<span class=\"number\">2</span>, timeBitsSize)).longValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 算出每毫秒能产出多少ID</span></span><br><span class=\"line\">        maxIdPerMill = ((Double) Math.pow(<span class=\"number\">2</span>, countBitsSize)).longValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 4. 根据Mysql自增ID取模, 算出每个服务器ID, 在生产环境中, 应该保证服务器数量是该值的一半, 如此一来就可以避免, 服务器集群整体</span></span><br><span class=\"line\"><span class=\"comment\">         * 重启时, 不会拿到与重启之前的服务器相同的Id</span></span><br><span class=\"line\"><span class=\"comment\">         * 这个值的计算是为了适应这种场景, 在服务器灰度上线的时候, 有可能是原来的服务器还没有关闭, 但是新的服务器已经起来了, 此时会有俩套</span></span><br><span class=\"line\"><span class=\"comment\">         * 服务器同时在处理业务逻辑, 那么它们就有可能拿到一样的服务器ID, 从而导致产生一样的ID号</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> serverSize = ((Double) Math.pow(<span class=\"number\">2</span>, serverIdBitsSize)).longValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        AccountServerId accountServerId = <span class=\"keyword\">new</span> AccountServerId();</span><br><span class=\"line\">        accountServerIdMapper.nextId(accountServerId);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> serverId = (<span class=\"keyword\">int</span>) (accountServerId.getId() % serverSize);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 5. 算出每个服务器ID在long类型中的数据位置, 然后缓存起来</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        serverIdBits = (serverId &lt;&lt; (countBitsSize));</span><br><span class=\"line\"></span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"[ID生成器] 开始时间:&#123;&#125;, 时间戳:&#123;&#125; \"</span>, <span class=\"keyword\">new</span> Date(startDateTime), startDateTime);</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"[ID生成器] 结束时间:&#123;&#125;, 时间戳:&#123;&#125; \"</span>, <span class=\"keyword\">new</span> Date(startDateTime + maxTime), maxTime);</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"[ID生成器] 每毫秒生成最大ID数:&#123;&#125; \"</span>, maxIdPerMill);</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"[ID生成器] 当前serverId: &#123;&#125;, serverIdSize:&#123;&#125;\"</span>, serverId, serverSize);</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"[ID生成器] serverIdBits: &#123;&#125;\"</span>, Long.toBinaryString(serverIdBits));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成一个64位的GUID</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 在next()方法中, 没有使用任何的对象, 如此一来就可以减轻GC的压力.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> curTime = System.currentTimeMillis() - startDateTime;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curTime &gt;= maxTime) &#123;</span><br><span class=\"line\">\t            LOG.error(<span class=\"string\">\"[ID生成器] 超过负载, &#123;&#125;, &#123;&#125;！返回 -1\"</span>, curTime, maxTime);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastGenerateTime != curTime) &#123;</span><br><span class=\"line\">                currentID = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentID &gt;= maxIdPerMill) &#123;</span><br><span class=\"line\">\t                LOG.error(<span class=\"string\">\"[ID生成器] 同一毫秒[\"</span> + curTime + <span class=\"string\">\"]内生成\"</span> + currentID + <span class=\"string\">\"个ID！返回 -1\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                ++currentID;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            lastGenerateTime = curTime;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> gid = (curTime &lt;&lt; countBitsSize + serverIdBitsSize) | serverIdBits;</span><br><span class=\"line\">            gid |= currentID;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> gid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">nextStrId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">tryNextId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> id = next();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> diff = System.currentTimeMillis() - start;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                String tid = Thread.currentThread().getName();</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"[ID生成器] 线程&#123;&#125; 生成ID: &#123;&#125; 大于3毫秒: &#123;&#125;\"</span>, tid, id, diff);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (id == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\t\tLOG.error(\"[ID生成器] 生成ID为-1, 可能超过每毫秒内生成最大数量, 等待1毫秒\");</span></span><br><span class=\"line\">                    TimeUnit.MILLISECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">tryNextStrId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(tryNextId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>mybatis<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccountServerIdMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span>(<span class=\"string\">\"REPLACE INTO server_id (stub) VALUES ('a');\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@SelectKey</span>(statement = <span class=\"string\">\"SELECT LAST_INSERT_ID()\"</span>, keyProperty = <span class=\"string\">\"id\"</span>, before = <span class=\"keyword\">false</span>, resultType = Long.class)</span><br><span class=\"line\">    <span class=\"function\">Long <span class=\"title\">nextId</span><span class=\"params\">(AccountServerId accountServerId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>SQL<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`server_id`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">`stub`</span> <span class=\"built_in\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`create_time`</span> datetime <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'创建时间'</span>,</span><br><span class=\"line\">  <span class=\"string\">`update_time`</span> datetime <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`stub`</span> (<span class=\"string\">`stub`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"number\">1</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(JMockit.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IDGeneratorUtilTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(IDGeneratorUtilTest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_TIMES = <span class=\"number\">2000000</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PRINT_TIMES = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Tested</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> IDGeneratorService idGeneratorUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Injectable</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> AccountServerIdMapper accountServerIdMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 21026 [main] DEBUG c.f.l.service.IDGeneratorUtilTest - 20506 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * 单线程的情况下, 在MacBook Pro上是每毫秒钟生成 97 个id</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testOneServerIdGenerate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Expectations() &#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\taccountServerIdMapper.nextId((AccountServerId) any);</span><br><span class=\"line\">\t\t\t\tresult = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tidGeneratorUtil.init();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSet&lt;Long&gt; ids = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX_TIMES; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> id = idGeneratorUtil.tryNextId();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ids.contains(id)) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(id);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tids.add(id);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlogger.debug((System.currentTimeMillis() - start) + <span class=\"string\">\" 毫秒内生成 \"</span> + ids.size() + <span class=\"string\">\" 个ID\"</span>);</span><br><span class=\"line\">\t\tAssert.assertEquals(ids.size(), MAX_TIMES);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tObject[] idArray = ids.toArray();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; PRINT_TIMES; i++) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(idArray[i] + <span class=\"string\">\" : \"</span> + Long.toBinaryString((Long) idArray[i]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 207703 [Thread-7] DEBUG c.f.l.service.IDGeneratorUtilTest - 207136 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 208031 [Thread-3] DEBUG c.f.l.service.IDGeneratorUtilTest - 207465 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 208626 [Thread-10] DEBUG c.f.l.service.IDGeneratorUtilTest - 208059 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 208630 [Thread-9] DEBUG c.f.l.service.IDGeneratorUtilTest - 208063 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209153 [Thread-6] DEBUG c.f.l.service.IDGeneratorUtilTest - 208586 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209170 [Thread-5] DEBUG c.f.l.service.IDGeneratorUtilTest - 208603 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209373 [Thread-2] DEBUG c.f.l.service.IDGeneratorUtilTest - 208807 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209412 [Thread-1] DEBUG c.f.l.service.IDGeneratorUtilTest - 208846 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209508 [Thread-4] DEBUG c.f.l.service.IDGeneratorUtilTest - 208941 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * 209536 [Thread-8] DEBUG c.f.l.service.IDGeneratorUtilTest - 208969 毫秒内生成 2000000 个ID</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多线程的情况下, 在MacBook Pro上是每毫秒钟生成 9 个id, 可见由于锁的竞争, 产生的影响还是非常大的</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMutilServerIdGenerate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Expectations() &#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\taccountServerIdMapper.nextId((AccountServerId) any);</span><br><span class=\"line\">\t\t\t\tresult = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tidGeneratorUtil.init();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tRunnable runnable = () -&gt; &#123;</span><br><span class=\"line\">\t\t\tSet&lt;Long&gt; ids = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX_TIMES; i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> id = idGeneratorUtil.tryNextId();</span><br><span class=\"line\">\t\t\t\tids.add(id);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tlogger.debug((System.currentTimeMillis() - start) + <span class=\"string\">\" 毫秒内生成 \"</span> + ids.size() + <span class=\"string\">\" 个ID\"</span>);</span><br><span class=\"line\">\t\t\tAssert.assertEquals(ids.size(), MAX_TIMES);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;Thread&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cpus = Runtime.getRuntime().availableProcessors() + <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">\"CPU : \"</span> + cpus);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cpus; i++) &#123;</span><br><span class=\"line\">\t\t\tThread thread = <span class=\"keyword\">new</span> Thread(runnable);</span><br><span class=\"line\">\t\t\tlist.add(thread);</span><br><span class=\"line\">\t\t\tthread.start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Thread thread : list) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tthread.join();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"通过Java Agent的redefineClasses实现Mock功能","_content":"\n# A)\n最近组内项目有个模块进行了较大规模的重构, 需要跑一下压力测试, 看一下性能如何. 但是介于产品的模式, 在正常场景下需要向通道发送消息, 然而在压测中, 我们希望这段行为能被mock掉. \n当时想到的方案可以采用Spring AOP, JMockit或者自己通过Javasisit/ASM这种字节码框架来实现功能.\n\n由于项目中我自己很少使用Spring AOP来做一些功能, 便没让它当首选方案, 研究了一下JMockit实现, 发现是使用动态Agent实现的.ok, 那么便初步定了一下方案Agent+Javasisit来实现(ASM手写字节码实在太痛苦).\n\n# B)\n\n> 这一段貌似是废话, 你们也看不见代码发生的真实地转变, 我只是记录一下心路历程.\n\n利用了2个小时, 采用Agent+Javasisit实现了一个小的模块, 基本功能也都实现了, 但是使用起来实在是太麻烦了, 代码耦合性太高. 于是又换了个思路, 去掉了Javasisit框架, 也完美地实现了功能.\n\n\n# C)\n整个mock框架分为俩部分.\n* agent-core, mock的核心代码\n* agent-client, 在这个工程中, 我们只需要在pom中引入需要替换的工程的依赖, 然后再agent-client中把要替换的类重写一遍就好了\n\n## 核心部分\n\n```\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── co\n    │   │       └── wangming\n    │   │           └── agent\n    │   │               ├── Agent.java\n    │   │               └── ClassesLoadUtil.java\n    │   └── resources\n    │       └── META-INF\n    │           └── MANIFEST.MF\n    └── test\n        └── java\n            └── Test.java\n```\n核心就是俩个Java文件和一个MF文件\n```java\npublic class Agent {\n\n\tstatic ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1);\n\n\tstatic List<String> hashCached = new ArrayList<>();\n\n\tpublic static void premain(String agentArgs, Instrumentation instrumentation) {\n\n\t\tSystem.out.println(\"Agnet 进入!!! \" + agentArgs);\n\t\tscheduledExecutorService.scheduleAtFixedRate(() -> tryRedefine(instrumentation, agentArgs), 0, 10, TimeUnit.SECONDS);\n\t}\n\n\tprivate static void tryRedefine(Instrumentation instrumentation, String agentArgs) {\n\n\t\tClass[] allLoadedClasses = instrumentation.getAllLoadedClasses();\n//\t\tSystem.out.println(\"allLoadedClasses数量:\" + allLoadedClasses.length);\n\n\t\tMap<String, Class> finupAllLoadedClasses = new HashMap<>();\n\t\ttry {\n\t\t\tfor (Class loadedClass : allLoadedClasses) {\n\n\t\t\t\tif (loadedClass == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (loadedClass.getCanonicalName() == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!loadedClass.getCanonicalName().startsWith(\"com.finup\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (hashCached.contains(loadedClass.getCanonicalName())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfinupAllLoadedClasses.put(loadedClass.getCanonicalName(), loadedClass);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tMap<String, byte[]> rewriteClasses = ClassesLoadUtil.getRewriteClasses(agentArgs);\n\t\tfor (String className : hashCached) {\n\t\t\trewriteClasses.remove(className);\n\t\t}\n\n\t\tif (finupAllLoadedClasses.size() == 0 || rewriteClasses.size() == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tSystem.out.println(\"finupAllLoadedClasses数量:\" + finupAllLoadedClasses.size());\n\n\t\tfor (String className : rewriteClasses.keySet()) {\n\t\t\tbyte[] classBytes = rewriteClasses.get(className);\n\n\t\t\tif (classBytes == null || classBytes.length == 0) {\n\t\t\t\tSystem.out.println(\"从 rewriteClasses 找不到class: \" + className);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tClass redefineClass = finupAllLoadedClasses.get(className);\n\t\t\tif (redefineClass == null) {\n\t\t\t\tSystem.out.println(\"从 finupAllLoadedClasses 找不到class: \" + className);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tSystem.out.println(\"开始redefineClasses: \" + className);\n\n\t\t\tClassDefinition classDefinition = new ClassDefinition(redefineClass, classBytes);\n\n\t\t\ttry {\n\t\t\t\tinstrumentation.redefineClasses(classDefinition);\n\t\t\t\thashCached.add(className);\n\n\t\t\t\tSystem.out.println(\"结束redefineClasses: \" + className);\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (UnmodifiableClassException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t}\n}\n```\n\n```java\npublic class ClassesLoadUtil {\n\n\tprivate static final Map<String, byte[]> path2Classes = new ConcurrentHashMap<>();\n\tprivate static final Map<String, byte[]> className2Classes = new ConcurrentHashMap<>();\n\n\tprivate static boolean havaLoaded = false;\n\n\tprivate static void loadFromZipFile(String jarPath) {\n\t\ttry {\n\t\t\tZipFile zipFile = new ZipFile(jarPath);\n\t\t\tEnumeration<? extends ZipEntry> entrys = zipFile.entries();\n\t\t\twhile (entrys.hasMoreElements()) {\n\t\t\t\tZipEntry zipEntry = entrys.nextElement();\n\t\t\t\tentryRead(jarPath, zipEntry);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n\tprivate static boolean entryRead(String jarPath, ZipEntry ze) throws IOException {\n\t\tif (ze.getSize() > 0) {\n\t\t\tString fileName = ze.getName();\n\t\t\tif (!fileName.endsWith(\".class\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (!fileName.contains(\"finup\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\ttry (ZipFile zf = new ZipFile(jarPath); InputStream input = zf.getInputStream(ze);\n\t\t\t     ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {\n\t\t\t\tif (input == null) {\n//\t\t\t\t\t\t\t\tlogger.error(\"Code Reload cant find file : \" + fileName);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tint b = 0;\n\t\t\t\twhile ((b = input.read()) != -1) {\n\t\t\t\t\tbyteArrayOutputStream.write(b);\n\t\t\t\t}\n\t\t\t\tbyte[] bytes = byteArrayOutputStream.toByteArray();\n\n\t\t\t\tpath2Classes.put(fileName, bytes);\n\n\t\t\t\tString name1 = fileName.replaceAll(\"\\\\.class\", \"\");\n\t\t\t\tString name2 = name1.replaceAll(\"/\", \".\");\n\n\t\t\t\tclassName2Classes.put(name2, bytes);\n\n\t\t\t\tSystem.out.println(\"加载文件: fileName : \" + fileName + \".  className:\" + name2);\n\t\t\t}\n\t\t} else {\n//\t\t\tSystem.out.println(ze.getName() + \" size is 0\");\n\t\t}\n\t\treturn false;\n\t}\n\n\n\tpublic static Map<String, byte[]> getRewriteClasses(String agentArgs) {\n\t\tsynchronized (className2Classes) {\n\t\t\tif (!havaLoaded) {\n\t\t\t\tloadFromZipFile(agentArgs);\n\t\t\t\thavaLoaded = true;\n\t\t\t}\n\t\t}\n\n\t\treturn className2Classes;\n\t}\n}\n```\nMF\n```\nManifest-Version: 1.0\nPremain-Class: co.wangming.agent.Agent\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\n```\n\n基本上这三个文件就可以完成功能了.\n\n## agent-client\n\n```\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── co\n    │   │       └── wangming\n    │   │           └── agent_client\n    │   │               └── service\n    │   │                   └── TestService\n    │   └── resources\n    │       └── META-INF\n    │           └── MANIFEST.MF\n    └── test\n        └── java\n```\n\n```\nManifest-Version: 1.0\nPremain-Class: co.wangming.agent.Agent\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\n```\n我们只需要把需要覆盖的`TestService`类在这里重写一下就好了, 但是注意, 不能删除/增加 方法/字段, 不能修改继承结构. 总而言之就是不能修改类的结构, 但是只是修改方法实现应该也能满足大多数需求了.\n\n> 以后有时间再想想怎么用Spring AOP来实现","source":"_posts/agent-mock.md","raw":"---\ntitle: 通过Java Agent的redefineClasses实现Mock功能\n---\n\n# A)\n最近组内项目有个模块进行了较大规模的重构, 需要跑一下压力测试, 看一下性能如何. 但是介于产品的模式, 在正常场景下需要向通道发送消息, 然而在压测中, 我们希望这段行为能被mock掉. \n当时想到的方案可以采用Spring AOP, JMockit或者自己通过Javasisit/ASM这种字节码框架来实现功能.\n\n由于项目中我自己很少使用Spring AOP来做一些功能, 便没让它当首选方案, 研究了一下JMockit实现, 发现是使用动态Agent实现的.ok, 那么便初步定了一下方案Agent+Javasisit来实现(ASM手写字节码实在太痛苦).\n\n# B)\n\n> 这一段貌似是废话, 你们也看不见代码发生的真实地转变, 我只是记录一下心路历程.\n\n利用了2个小时, 采用Agent+Javasisit实现了一个小的模块, 基本功能也都实现了, 但是使用起来实在是太麻烦了, 代码耦合性太高. 于是又换了个思路, 去掉了Javasisit框架, 也完美地实现了功能.\n\n\n# C)\n整个mock框架分为俩部分.\n* agent-core, mock的核心代码\n* agent-client, 在这个工程中, 我们只需要在pom中引入需要替换的工程的依赖, 然后再agent-client中把要替换的类重写一遍就好了\n\n## 核心部分\n\n```\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── co\n    │   │       └── wangming\n    │   │           └── agent\n    │   │               ├── Agent.java\n    │   │               └── ClassesLoadUtil.java\n    │   └── resources\n    │       └── META-INF\n    │           └── MANIFEST.MF\n    └── test\n        └── java\n            └── Test.java\n```\n核心就是俩个Java文件和一个MF文件\n```java\npublic class Agent {\n\n\tstatic ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1);\n\n\tstatic List<String> hashCached = new ArrayList<>();\n\n\tpublic static void premain(String agentArgs, Instrumentation instrumentation) {\n\n\t\tSystem.out.println(\"Agnet 进入!!! \" + agentArgs);\n\t\tscheduledExecutorService.scheduleAtFixedRate(() -> tryRedefine(instrumentation, agentArgs), 0, 10, TimeUnit.SECONDS);\n\t}\n\n\tprivate static void tryRedefine(Instrumentation instrumentation, String agentArgs) {\n\n\t\tClass[] allLoadedClasses = instrumentation.getAllLoadedClasses();\n//\t\tSystem.out.println(\"allLoadedClasses数量:\" + allLoadedClasses.length);\n\n\t\tMap<String, Class> finupAllLoadedClasses = new HashMap<>();\n\t\ttry {\n\t\t\tfor (Class loadedClass : allLoadedClasses) {\n\n\t\t\t\tif (loadedClass == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (loadedClass.getCanonicalName() == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!loadedClass.getCanonicalName().startsWith(\"com.finup\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (hashCached.contains(loadedClass.getCanonicalName())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfinupAllLoadedClasses.put(loadedClass.getCanonicalName(), loadedClass);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tMap<String, byte[]> rewriteClasses = ClassesLoadUtil.getRewriteClasses(agentArgs);\n\t\tfor (String className : hashCached) {\n\t\t\trewriteClasses.remove(className);\n\t\t}\n\n\t\tif (finupAllLoadedClasses.size() == 0 || rewriteClasses.size() == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tSystem.out.println(\"finupAllLoadedClasses数量:\" + finupAllLoadedClasses.size());\n\n\t\tfor (String className : rewriteClasses.keySet()) {\n\t\t\tbyte[] classBytes = rewriteClasses.get(className);\n\n\t\t\tif (classBytes == null || classBytes.length == 0) {\n\t\t\t\tSystem.out.println(\"从 rewriteClasses 找不到class: \" + className);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tClass redefineClass = finupAllLoadedClasses.get(className);\n\t\t\tif (redefineClass == null) {\n\t\t\t\tSystem.out.println(\"从 finupAllLoadedClasses 找不到class: \" + className);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tSystem.out.println(\"开始redefineClasses: \" + className);\n\n\t\t\tClassDefinition classDefinition = new ClassDefinition(redefineClass, classBytes);\n\n\t\t\ttry {\n\t\t\t\tinstrumentation.redefineClasses(classDefinition);\n\t\t\t\thashCached.add(className);\n\n\t\t\t\tSystem.out.println(\"结束redefineClasses: \" + className);\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (UnmodifiableClassException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t}\n}\n```\n\n```java\npublic class ClassesLoadUtil {\n\n\tprivate static final Map<String, byte[]> path2Classes = new ConcurrentHashMap<>();\n\tprivate static final Map<String, byte[]> className2Classes = new ConcurrentHashMap<>();\n\n\tprivate static boolean havaLoaded = false;\n\n\tprivate static void loadFromZipFile(String jarPath) {\n\t\ttry {\n\t\t\tZipFile zipFile = new ZipFile(jarPath);\n\t\t\tEnumeration<? extends ZipEntry> entrys = zipFile.entries();\n\t\t\twhile (entrys.hasMoreElements()) {\n\t\t\t\tZipEntry zipEntry = entrys.nextElement();\n\t\t\t\tentryRead(jarPath, zipEntry);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n\tprivate static boolean entryRead(String jarPath, ZipEntry ze) throws IOException {\n\t\tif (ze.getSize() > 0) {\n\t\t\tString fileName = ze.getName();\n\t\t\tif (!fileName.endsWith(\".class\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (!fileName.contains(\"finup\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\ttry (ZipFile zf = new ZipFile(jarPath); InputStream input = zf.getInputStream(ze);\n\t\t\t     ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {\n\t\t\t\tif (input == null) {\n//\t\t\t\t\t\t\t\tlogger.error(\"Code Reload cant find file : \" + fileName);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tint b = 0;\n\t\t\t\twhile ((b = input.read()) != -1) {\n\t\t\t\t\tbyteArrayOutputStream.write(b);\n\t\t\t\t}\n\t\t\t\tbyte[] bytes = byteArrayOutputStream.toByteArray();\n\n\t\t\t\tpath2Classes.put(fileName, bytes);\n\n\t\t\t\tString name1 = fileName.replaceAll(\"\\\\.class\", \"\");\n\t\t\t\tString name2 = name1.replaceAll(\"/\", \".\");\n\n\t\t\t\tclassName2Classes.put(name2, bytes);\n\n\t\t\t\tSystem.out.println(\"加载文件: fileName : \" + fileName + \".  className:\" + name2);\n\t\t\t}\n\t\t} else {\n//\t\t\tSystem.out.println(ze.getName() + \" size is 0\");\n\t\t}\n\t\treturn false;\n\t}\n\n\n\tpublic static Map<String, byte[]> getRewriteClasses(String agentArgs) {\n\t\tsynchronized (className2Classes) {\n\t\t\tif (!havaLoaded) {\n\t\t\t\tloadFromZipFile(agentArgs);\n\t\t\t\thavaLoaded = true;\n\t\t\t}\n\t\t}\n\n\t\treturn className2Classes;\n\t}\n}\n```\nMF\n```\nManifest-Version: 1.0\nPremain-Class: co.wangming.agent.Agent\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\n```\n\n基本上这三个文件就可以完成功能了.\n\n## agent-client\n\n```\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── co\n    │   │       └── wangming\n    │   │           └── agent_client\n    │   │               └── service\n    │   │                   └── TestService\n    │   └── resources\n    │       └── META-INF\n    │           └── MANIFEST.MF\n    └── test\n        └── java\n```\n\n```\nManifest-Version: 1.0\nPremain-Class: co.wangming.agent.Agent\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\n```\n我们只需要把需要覆盖的`TestService`类在这里重写一下就好了, 但是注意, 不能删除/增加 方法/字段, 不能修改继承结构. 总而言之就是不能修改类的结构, 但是只是修改方法实现应该也能满足大多数需求了.\n\n> 以后有时间再想想怎么用Spring AOP来实现","slug":"agent-mock","published":1,"date":"2018-11-17T07:15:38.000Z","updated":"2018-11-17T12:06:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoljno5n0001uds61vab0xup","content":"<h1 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A)\"></a>A)</h1><p>最近组内项目有个模块进行了较大规模的重构, 需要跑一下压力测试, 看一下性能如何. 但是介于产品的模式, 在正常场景下需要向通道发送消息, 然而在压测中, 我们希望这段行为能被mock掉.<br>当时想到的方案可以采用Spring AOP, JMockit或者自己通过Javasisit/ASM这种字节码框架来实现功能.</p>\n<p>由于项目中我自己很少使用Spring AOP来做一些功能, 便没让它当首选方案, 研究了一下JMockit实现, 发现是使用动态Agent实现的.ok, 那么便初步定了一下方案Agent+Javasisit来实现(ASM手写字节码实在太痛苦).</p>\n<h1 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B)\"></a>B)</h1><blockquote>\n<p>这一段貌似是废话, 你们也看不见代码发生的真实地转变, 我只是记录一下心路历程.</p>\n</blockquote>\n<p>利用了2个小时, 采用Agent+Javasisit实现了一个小的模块, 基本功能也都实现了, 但是使用起来实在是太麻烦了, 代码耦合性太高. 于是又换了个思路, 去掉了Javasisit框架, 也完美地实现了功能.</p>\n<h1 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C)\"></a>C)</h1><p>整个mock框架分为俩部分.</p>\n<ul>\n<li>agent-core, mock的核心代码</li>\n<li>agent-client, 在这个工程中, 我们只需要在pom中引入需要替换的工程的依赖, 然后再agent-client中把要替换的类重写一遍就好了</li>\n</ul>\n<h2 id=\"核心部分\"><a href=\"#核心部分\" class=\"headerlink\" title=\"核心部分\"></a>核心部分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── main</span><br><span class=\"line\">    │   ├── java</span><br><span class=\"line\">    │   │   └── co</span><br><span class=\"line\">    │   │       └── wangming</span><br><span class=\"line\">    │   │           └── agent</span><br><span class=\"line\">    │   │               ├── Agent.java</span><br><span class=\"line\">    │   │               └── ClassesLoadUtil.java</span><br><span class=\"line\">    │   └── resources</span><br><span class=\"line\">    │       └── META-INF</span><br><span class=\"line\">    │           └── MANIFEST.MF</span><br><span class=\"line\">    └── test</span><br><span class=\"line\">        └── java</span><br><span class=\"line\">            └── Test.java</span><br></pre></td></tr></table></figure>\n<p>核心就是俩个Java文件和一个MF文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Agent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> ScheduledExecutorService scheduledExecutorService = <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> List&lt;String&gt; hashCached = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Agnet 进入!!! \"</span> + agentArgs);</span><br><span class=\"line\">\t\tscheduledExecutorService.scheduleAtFixedRate(() -&gt; tryRedefine(instrumentation, agentArgs), <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">tryRedefine</span><span class=\"params\">(Instrumentation instrumentation, String agentArgs)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tClass[] allLoadedClasses = instrumentation.getAllLoadedClasses();</span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(\"allLoadedClasses数量:\" + allLoadedClasses.length);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tMap&lt;String, Class&gt; finupAllLoadedClasses = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (loadedClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (loadedClass.getCanonicalName() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!loadedClass.getCanonicalName().startsWith(<span class=\"string\">\"com.finup\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (hashCached.contains(loadedClass.getCanonicalName())) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tfinupAllLoadedClasses.put(loadedClass.getCanonicalName(), loadedClass);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tMap&lt;String, <span class=\"keyword\">byte</span>[]&gt; rewriteClasses = ClassesLoadUtil.getRewriteClasses(agentArgs);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String className : hashCached) &#123;</span><br><span class=\"line\">\t\t\trewriteClasses.remove(className);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (finupAllLoadedClasses.size() == <span class=\"number\">0</span> || rewriteClasses.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"finupAllLoadedClasses数量:\"</span> + finupAllLoadedClasses.size());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String className : rewriteClasses.keySet()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] classBytes = rewriteClasses.get(className);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (classBytes == <span class=\"keyword\">null</span> || classBytes.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"从 rewriteClasses 找不到class: \"</span> + className);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tClass redefineClass = finupAllLoadedClasses.get(className);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (redefineClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"从 finupAllLoadedClasses 找不到class: \"</span> + className);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"开始redefineClasses: \"</span> + className);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tClassDefinition classDefinition = <span class=\"keyword\">new</span> ClassDefinition(redefineClass, classBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tinstrumentation.redefineClasses(classDefinition);</span><br><span class=\"line\">\t\t\t\thashCached.add(className);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"结束redefineClasses: \"</span> + className);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (UnmodifiableClassException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassesLoadUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, <span class=\"keyword\">byte</span>[]&gt; path2Classes = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, <span class=\"keyword\">byte</span>[]&gt; className2Classes = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> havaLoaded = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadFromZipFile</span><span class=\"params\">(String jarPath)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tZipFile zipFile = <span class=\"keyword\">new</span> ZipFile(jarPath);</span><br><span class=\"line\">\t\t\tEnumeration&lt;? extends ZipEntry&gt; entrys = zipFile.entries();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (entrys.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tZipEntry zipEntry = entrys.nextElement();</span><br><span class=\"line\">\t\t\t\tentryRead(jarPath, zipEntry);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">entryRead</span><span class=\"params\">(String jarPath, ZipEntry ze)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ze.getSize() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tString fileName = ze.getName();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!fileName.endsWith(<span class=\"string\">\".class\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!fileName.contains(<span class=\"string\">\"finup\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> (ZipFile zf = <span class=\"keyword\">new</span> ZipFile(jarPath); InputStream input = zf.getInputStream(ze);</span><br><span class=\"line\">\t\t\t     ByteArrayOutputStream byteArrayOutputStream = <span class=\"keyword\">new</span> ByteArrayOutputStream()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\t\t\t\t\tlogger.error(\"Code Reload cant find file : \" + fileName);</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ((b = input.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tbyteArrayOutputStream.write(b);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tpath2Classes.put(fileName, bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tString name1 = fileName.replaceAll(<span class=\"string\">\"\\\\.class\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\t\tString name2 = name1.replaceAll(<span class=\"string\">\"/\"</span>, <span class=\"string\">\".\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tclassName2Classes.put(name2, bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"加载文件: fileName : \"</span> + fileName + <span class=\"string\">\".  className:\"</span> + name2);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(ze.getName() + \" size is 0\");</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, <span class=\"keyword\">byte</span>[]&gt; getRewriteClasses(String agentArgs) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (className2Classes) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!havaLoaded) &#123;</span><br><span class=\"line\">\t\t\t\tloadFromZipFile(agentArgs);</span><br><span class=\"line\">\t\t\t\thavaLoaded = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> className2Classes;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MF<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: co.wangming.agent.Agent</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure></p>\n<p>基本上这三个文件就可以完成功能了.</p>\n<h2 id=\"agent-client\"><a href=\"#agent-client\" class=\"headerlink\" title=\"agent-client\"></a>agent-client</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── main</span><br><span class=\"line\">    │   ├── java</span><br><span class=\"line\">    │   │   └── co</span><br><span class=\"line\">    │   │       └── wangming</span><br><span class=\"line\">    │   │           └── agent_client</span><br><span class=\"line\">    │   │               └── service</span><br><span class=\"line\">    │   │                   └── TestService</span><br><span class=\"line\">    │   └── resources</span><br><span class=\"line\">    │       └── META-INF</span><br><span class=\"line\">    │           └── MANIFEST.MF</span><br><span class=\"line\">    └── test</span><br><span class=\"line\">        └── java</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: co.wangming.agent.Agent</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure>\n<p>我们只需要把需要覆盖的<code>TestService</code>类在这里重写一下就好了, 但是注意, 不能删除/增加 方法/字段, 不能修改继承结构. 总而言之就是不能修改类的结构, 但是只是修改方法实现应该也能满足大多数需求了.</p>\n<blockquote>\n<p>以后有时间再想想怎么用Spring AOP来实现</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A)\"></a>A)</h1><p>最近组内项目有个模块进行了较大规模的重构, 需要跑一下压力测试, 看一下性能如何. 但是介于产品的模式, 在正常场景下需要向通道发送消息, 然而在压测中, 我们希望这段行为能被mock掉.<br>当时想到的方案可以采用Spring AOP, JMockit或者自己通过Javasisit/ASM这种字节码框架来实现功能.</p>\n<p>由于项目中我自己很少使用Spring AOP来做一些功能, 便没让它当首选方案, 研究了一下JMockit实现, 发现是使用动态Agent实现的.ok, 那么便初步定了一下方案Agent+Javasisit来实现(ASM手写字节码实在太痛苦).</p>\n<h1 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B)\"></a>B)</h1><blockquote>\n<p>这一段貌似是废话, 你们也看不见代码发生的真实地转变, 我只是记录一下心路历程.</p>\n</blockquote>\n<p>利用了2个小时, 采用Agent+Javasisit实现了一个小的模块, 基本功能也都实现了, 但是使用起来实在是太麻烦了, 代码耦合性太高. 于是又换了个思路, 去掉了Javasisit框架, 也完美地实现了功能.</p>\n<h1 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C)\"></a>C)</h1><p>整个mock框架分为俩部分.</p>\n<ul>\n<li>agent-core, mock的核心代码</li>\n<li>agent-client, 在这个工程中, 我们只需要在pom中引入需要替换的工程的依赖, 然后再agent-client中把要替换的类重写一遍就好了</li>\n</ul>\n<h2 id=\"核心部分\"><a href=\"#核心部分\" class=\"headerlink\" title=\"核心部分\"></a>核心部分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── main</span><br><span class=\"line\">    │   ├── java</span><br><span class=\"line\">    │   │   └── co</span><br><span class=\"line\">    │   │       └── wangming</span><br><span class=\"line\">    │   │           └── agent</span><br><span class=\"line\">    │   │               ├── Agent.java</span><br><span class=\"line\">    │   │               └── ClassesLoadUtil.java</span><br><span class=\"line\">    │   └── resources</span><br><span class=\"line\">    │       └── META-INF</span><br><span class=\"line\">    │           └── MANIFEST.MF</span><br><span class=\"line\">    └── test</span><br><span class=\"line\">        └── java</span><br><span class=\"line\">            └── Test.java</span><br></pre></td></tr></table></figure>\n<p>核心就是俩个Java文件和一个MF文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Agent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> ScheduledExecutorService scheduledExecutorService = <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> List&lt;String&gt; hashCached = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String agentArgs, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Agnet 进入!!! \"</span> + agentArgs);</span><br><span class=\"line\">\t\tscheduledExecutorService.scheduleAtFixedRate(() -&gt; tryRedefine(instrumentation, agentArgs), <span class=\"number\">0</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">tryRedefine</span><span class=\"params\">(Instrumentation instrumentation, String agentArgs)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tClass[] allLoadedClasses = instrumentation.getAllLoadedClasses();</span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(\"allLoadedClasses数量:\" + allLoadedClasses.length);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tMap&lt;String, Class&gt; finupAllLoadedClasses = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (loadedClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (loadedClass.getCanonicalName() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!loadedClass.getCanonicalName().startsWith(<span class=\"string\">\"com.finup\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (hashCached.contains(loadedClass.getCanonicalName())) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tfinupAllLoadedClasses.put(loadedClass.getCanonicalName(), loadedClass);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tMap&lt;String, <span class=\"keyword\">byte</span>[]&gt; rewriteClasses = ClassesLoadUtil.getRewriteClasses(agentArgs);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String className : hashCached) &#123;</span><br><span class=\"line\">\t\t\trewriteClasses.remove(className);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (finupAllLoadedClasses.size() == <span class=\"number\">0</span> || rewriteClasses.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"finupAllLoadedClasses数量:\"</span> + finupAllLoadedClasses.size());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String className : rewriteClasses.keySet()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] classBytes = rewriteClasses.get(className);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (classBytes == <span class=\"keyword\">null</span> || classBytes.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"从 rewriteClasses 找不到class: \"</span> + className);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tClass redefineClass = finupAllLoadedClasses.get(className);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (redefineClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"从 finupAllLoadedClasses 找不到class: \"</span> + className);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"开始redefineClasses: \"</span> + className);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tClassDefinition classDefinition = <span class=\"keyword\">new</span> ClassDefinition(redefineClass, classBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tinstrumentation.redefineClasses(classDefinition);</span><br><span class=\"line\">\t\t\t\thashCached.add(className);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"结束redefineClasses: \"</span> + className);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (UnmodifiableClassException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassesLoadUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, <span class=\"keyword\">byte</span>[]&gt; path2Classes = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, <span class=\"keyword\">byte</span>[]&gt; className2Classes = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> havaLoaded = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadFromZipFile</span><span class=\"params\">(String jarPath)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tZipFile zipFile = <span class=\"keyword\">new</span> ZipFile(jarPath);</span><br><span class=\"line\">\t\t\tEnumeration&lt;? extends ZipEntry&gt; entrys = zipFile.entries();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (entrys.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tZipEntry zipEntry = entrys.nextElement();</span><br><span class=\"line\">\t\t\t\tentryRead(jarPath, zipEntry);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">entryRead</span><span class=\"params\">(String jarPath, ZipEntry ze)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ze.getSize() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tString fileName = ze.getName();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!fileName.endsWith(<span class=\"string\">\".class\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!fileName.contains(<span class=\"string\">\"finup\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> (ZipFile zf = <span class=\"keyword\">new</span> ZipFile(jarPath); InputStream input = zf.getInputStream(ze);</span><br><span class=\"line\">\t\t\t     ByteArrayOutputStream byteArrayOutputStream = <span class=\"keyword\">new</span> ByteArrayOutputStream()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\t\t\t\t\tlogger.error(\"Code Reload cant find file : \" + fileName);</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ((b = input.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tbyteArrayOutputStream.write(b);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tpath2Classes.put(fileName, bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tString name1 = fileName.replaceAll(<span class=\"string\">\"\\\\.class\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\t\tString name2 = name1.replaceAll(<span class=\"string\">\"/\"</span>, <span class=\"string\">\".\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tclassName2Classes.put(name2, bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"加载文件: fileName : \"</span> + fileName + <span class=\"string\">\".  className:\"</span> + name2);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(ze.getName() + \" size is 0\");</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, <span class=\"keyword\">byte</span>[]&gt; getRewriteClasses(String agentArgs) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (className2Classes) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!havaLoaded) &#123;</span><br><span class=\"line\">\t\t\t\tloadFromZipFile(agentArgs);</span><br><span class=\"line\">\t\t\t\thavaLoaded = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> className2Classes;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MF<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: co.wangming.agent.Agent</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure></p>\n<p>基本上这三个文件就可以完成功能了.</p>\n<h2 id=\"agent-client\"><a href=\"#agent-client\" class=\"headerlink\" title=\"agent-client\"></a>agent-client</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── main</span><br><span class=\"line\">    │   ├── java</span><br><span class=\"line\">    │   │   └── co</span><br><span class=\"line\">    │   │       └── wangming</span><br><span class=\"line\">    │   │           └── agent_client</span><br><span class=\"line\">    │   │               └── service</span><br><span class=\"line\">    │   │                   └── TestService</span><br><span class=\"line\">    │   └── resources</span><br><span class=\"line\">    │       └── META-INF</span><br><span class=\"line\">    │           └── MANIFEST.MF</span><br><span class=\"line\">    └── test</span><br><span class=\"line\">        └── java</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: co.wangming.agent.Agent</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure>\n<p>我们只需要把需要覆盖的<code>TestService</code>类在这里重写一下就好了, 但是注意, 不能删除/增加 方法/字段, 不能修改继承结构. 总而言之就是不能修改类的结构, 但是只是修改方法实现应该也能满足大多数需求了.</p>\n<blockquote>\n<p>以后有时间再想想怎么用Spring AOP来实现</p>\n</blockquote>\n"},{"title":"PEG.js Documentation","_content":"\n# Table of Contents\n#### Installation\n* Node.js\n* Browser\n\n#### Generating a Parser\n* Command Line\n* JavaScript API\n\n#### Using the Parser\n\n#### Grammar Syntax and Semantics\n* Parsing Expression Types\n\n#### Compatibility\n\n## Installation\n\n## Node.js\n要使用`pegjs`命令的话, 需要使用全局模式安装`PEG.js`:\n```\n$ npm install -g pegjs\n```\n要使用`JavaScript API`, 需要使用`locally`模式安装 `PEG.js` :\n```\n$ npm install pegjs\n```\n如果既要使用`pegjs`命令又要使用JavaScript API, 那么你需要将上面俩种方式都安装一遍.\n\n### Browser\n通过`Bower`安装 `PEG.js`:\n```\n$ bower install pegjs\n```\n\n## Generating a Parser\nPEG.js generates parser from a grammar that describes expected input and can specify what the parser returns (using semantic actions on matched parts of the input). Generated parser itself is a JavaScript object with a simple API.\n\n`PEG.js`根据一个grammar生成parser, 我们可以描述这个grammar希望获得怎么样的输入以及指定parser返回的内容(using semantic actions on matched parts of the input). 通过一个简单api就可以可以生成一个parser JS对象.\n\n### Command Line\nTo generate a parser from your grammar, use the pegjs command:\n想要将你的grammar生成parser, 直接像下面这样使用`pegjs`命令就好:\n```\n$ pegjs arithmetics.pegjs\n```\nThis writes parser source code into a file with the same name as the grammar file but with “.js” extension. You can also specify the output file explicitly:\n上面的命令会将生成的parser的源码输出到与grammar文件同名的js结尾的文件中. 我们也可以像下面这样输出到指定文件中:\n```\n$ pegjs -o arithmetics-parser.js arithmetics.pegjs\n```\nIf you omit both input and output file, standard input and output are used.\n但是如果你将输入输出文件都忽略了, 那么系统将会采用标准输入输出.\n\nBy default, the generated parser is in the Node.js module format. You can override this using the * --format option.\n在默认设置下, 生成的parser代码是以Node.js module format 进行格式化的, 你可以通过指定`--format`选项来改变它.\n\nYou can tweak the generated parser with several options:\n你可以通过如下几个命令来修改生成的parser的默认行为.\n\n* --allowed-start-rules: Comma-separated list of rules the parser will be allowed to start parsing from (default: the first rule in the grammar).\n* --cache\nMakes the parser cache results, avoiding exponential parsing time in pathological cases but making the parser slower.\n* --dependency\nMakes the parser require a specified dependency (can be specified multiple times).\n* --export-var\nName of a global variable into which the parser object is assigned to when no module loader is detected.\n* --extra-options\nAdditional options (in JSON format) to pass to peg.generate.\n* --extra-options-file\nFile with additional options (in JSON format) to pass to peg.generate.\n* --format\nFormat of the generated parser: amd, commonjs, globals, umd (default: commonjs).\n* --optimize\nSelects between optimizing the generated parser for parsing speed (speed) or code size (size) (default: speed)\n* --plugin\nMakes PEG.js use a specified plugin (can be specified multiple times).\n* --trace\nMakes the parser trace its progress.\n\n### JavaScript API\nIn Node.js, require the PEG.js parser generator module:\n```javascript\nvar peg = require(\"pegjs\");\n```\nIn browser, include the PEG.js library in your web page or application using the `<script>` tag. If PEG.js detects an AMD loader, it will define itself as a module, otherwise the API will be available in the peg global object.\n\nTo generate a parser, call the peg.generate method and pass your grammar as a parameter:\n```javascript\nvar parser = peg.generate(\"start = ('a' / 'b')+\");\n```\nThe method will return generated parser object or its source code as a string (depending on the value of the output option — see below). It will throw an exception if the grammar is invalid. The exception will contain message property with more details about the error.\n\nYou can tweak the generated parser by passing a second parameter with an options object to peg.generate. The following options are supported:\n\n* allowedStartRules: Rules the parser will be allowed to start parsing from (default: the first rule in the grammar).\n* cache: If true, makes the parser cache results, avoiding exponential parsing time in pathological cases but making the parser slower (default: false).\n* dependencies\nParser dependencies, the value is an object which maps variables used to access the dependencies in the parser to module IDs used to load them; valid only when format is set to \"amd\", \"commonjs\", or \"umd\" (default: {}).\n* exportVar\nName of a global variable into which the parser object is assigned to when no module loader is detected; valid only when format is set to \"globals\" or \"umd\" (default: null).\n* format\nformat of the generated parser (\"amd\", \"bare\", \"commonjs\", \"globals\", or \"umd\"); valid only when output is set to \"source\" (default: \"bare\").\n* optimize\nSelects between optimizing the generated parser for parsing speed (\"speed\") or code size (\"size\") (default: \"speed\").\n* output\nIf set to \"parser\", the method will return generated parser object; if set to \"source\", it will return parser source code as a string (default: \"parser\").\n* plugins\nPlugins to use.\n* trace\nMakes the parser trace its progress (default: false).\n\n## Using the Parser\nUsing the generated parser is simple — just call its parse method and pass an input string as a parameter. The method will return a parse result (the exact value depends on the grammar used to generate the parser) or throw an exception if the input is invalid. The exception will contain location, expected, found and message properties with more details about the error.\n```javascript\nparser.parse(\"abba\"); // returns [\"a\", \"b\", \"b\", \"a\"]\n\nparser.parse(\"abcd\"); // throws an exception \n```\nYou can tweak parser behavior by passing a second parameter with an options object to the parse method. The following options are supported:\n\n* startRule: Name of the rule to start parsing from.\n* tracer: Tracer to use.\n\nParsers can also support their own custom options.\n\n## Grammar Syntax and Semantics\nThe grammar syntax is similar to JavaScript in that it is not line-oriented and ignores whitespace between tokens. You can also use JavaScript-style comments (// ... and /* ... */).\n\nLet's look at example grammar that recognizes simple arithmetic expressions like 2*(3+4). A parser generated from this grammar computes their values.\n```javascript\nstart\n  = additive\n\nadditive\n  = left:multiplicative \"+\" right:additive { return left + right; }\n  / multiplicative\n\nmultiplicative\n  = left:primary \"*\" right:multiplicative { return left * right; }\n  / primary\n\nprimary\n  = integer\n  / \"(\" additive:additive \")\" { return additive; }\n\ninteger \"integer\"\n  = digits:[0-9]+ { return parseInt(digits.join(\"\"), 10); }\n```\n\nOn the top level, the grammar consists of rules (in our example, there are five of them). Each rule has a name (e.g. integer) that identifies the rule, and a parsing expression (e.g. digits:[0-9]+ { return parseInt(digits.join(\"\"), 10); }) that defines a pattern to match against the input text and possibly contains some JavaScript code that determines what happens when the pattern matches successfully. A rule can also contain human-readable name that is used in error messages (in our example, only the integer rule has a human-readable name). The parsing starts at the first rule, which is also called the start rule.\n\nA rule name must be a JavaScript identifier. It is followed by an equality sign (“=”) and a parsing expression. If the rule has a human-readable name, it is written as a JavaScript string between the name and separating equality sign. Rules need to be separated only by whitespace (their beginning is easily recognizable), but a semicolon (“;”) after the parsing expression is allowed.\n\nThe first rule can be preceded by an initializer — a piece of JavaScript code in curly braces (“{” and “}”). This code is executed before the generated parser starts parsing. All variables and functions defined in the initializer are accessible in rule actions and semantic predicates. The code inside the initializer can access options passed to the parser using the options variable. Curly braces in the initializer code must be balanced. Let's look at the example grammar from above using a simple initializer.\n```javascript\n{\n  function makeInteger(o) {\n    return parseInt(o.join(\"\"), 10);\n  }\n}\n\nstart\n  = additive\n\nadditive\n  = left:multiplicative \"+\" right:additive { return left + right; }\n  / multiplicative\n\nmultiplicative\n  = left:primary \"*\" right:multiplicative { return left * right; }\n  / primary\n\nprimary\n  = integer\n  / \"(\" additive:additive \")\" { return additive; }\n\ninteger \"integer\"\n  = digits:[0-9]+ { return makeInteger(digits); }\n```\nThe parsing expressions of the rules are used to match the input text to the grammar. There are various types of expressions — matching characters or character classes, indicating optional parts and repetition, etc. Expressions can also contain references to other rules. See detailed description below.\n\nIf an expression successfully matches a part of the text when running the generated parser, it produces a match result, which is a JavaScript value. For example:\n\n* An expression matching a literal string produces a JavaScript string containing matched text.\n* An expression matching repeated occurrence of some subexpression produces a JavaScript array with all the matches.\n\nThe match results propagate through the rules when the rule names are used in expressions, up to the start rule. The generated parser returns start rule's match result when parsing is successful.\n\nOne special case of parser expression is a parser action — a piece of JavaScript code inside curly braces (“{” and “}”) that takes match results of some of the the preceding expressions and returns a JavaScript value. This value is considered match result of the preceding expression (in other words, the parser action is a match result transformer).\n\nIn our arithmetics example, there are many parser actions. Consider the action in expression digits:[0-9]+ { return parseInt(digits.join(\"\"), 10); }. It takes the match result of the expression [0-9]+, which is an array of strings containing digits, as its parameter. It joins the digits together to form a number and converts it to a JavaScript number object.\n\n### Parsing Expression Types\nThere are several types of parsing expressions, some of them containing subexpressions and thus forming a recursive structure:\n\n##### \"literal\"\n##### 'literal'\nMatch exact literal string and return it. The string syntax is the same as in JavaScript. Appending i right after the literal makes the match case-insensitive.\n\n##### .\nMatch exactly one character and return it as a string.\n\n##### [characters]\nMatch one character from a set and return it as a string. The characters in the list can be escaped in exactly the same way as in JavaScript string. The list of characters can also contain ranges (e.g. [a-z] means “all lowercase letters”). Preceding the characters with ^ inverts the matched set (e.g. [^a-z] means “all character but lowercase letters”). Appending i right after the literal makes the match case-insensitive.\n\n##### rule\nMatch a parsing expression of a rule recursively and return its match result.\n\n##### ( expression )\nMatch a subexpression and return its match result.\n\n##### expression *\nMatch zero or more repetitions of the expression and return their match results in an array. The matching is greedy, i.e. the parser tries to match the expression as many times as possible. Unlike in regular expressions, there is no backtracking.\n\n##### expression +\nMatch one or more repetitions of the expression and return their match results in an array. The matching is greedy, i.e. the parser tries to match the expression as many times as possible. Unlike in regular expressions, there is no backtracking.\n\n##### expression ?\nTry to match the expression. If the match succeeds, return its match result, otherwise return null. Unlike in regular expressions, there is no backtracking.\n\n##### & expression\nTry to match the expression. If the match succeeds, just return undefined and do not consume any input, otherwise consider the match failed.\n\n##### ! expression\nTry to match the expression. If the match does not succeed, just return undefined and do not consume any input, otherwise consider the match failed.\n\n##### & { predicate }\nThe predicate is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. It should return some JavaScript value using the return statement. If the returned value evaluates to true in boolean context, just return undefined and do not consume any input; otherwise consider the match failed.\n\nThe code inside the predicate can access all variables and functions defined in the initializer at the beginning of the grammar.\n\nThe code inside the predicate can also access location information using the location function. It returns an object like this:\n```javascript\n{\n  start: { offset: 23, line: 5, column: 6 },\n  end:   { offset: 23, line: 5, column: 6 }\n}\n```\nThe start and end properties both refer to the current parse position. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.\n\nThe code inside the predicate can also access options passed to the parser using the options variable.\n\nNote that curly braces in the predicate code must be balanced.\n\n##### ! { predicate }\nThe predicate is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. It should return some JavaScript value using the return statement. If the returned value evaluates to false in boolean context, just return undefined and do not consume any input; otherwise consider the match failed.\n\nThe code inside the predicate can access all variables and functions defined in the initializer at the beginning of the grammar.\n\nThe code inside the predicate can also access location information using the location function. It returns an object like this:\n```javascript\n{\n  start: { offset: 23, line: 5, column: 6 },\n  end:   { offset: 23, line: 5, column: 6 }\n}\n```\nThe start and end properties both refer to the current parse position. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.\n\nThe code inside the predicate can also access options passed to the parser using the options variable.\n\nNote that curly braces in the predicate code must be balanced.\n\n##### $ expression\nTry to match the expression. If the match succeeds, return the matched text instead of the match result.\n\n##### label : expression\nMatch the expression and remember its match result under given label. The label must be a JavaScript identifier.\n\nLabeled expressions are useful together with actions, where saved match results can be accessed by action's JavaScript code.\n\n##### expression1 expression2 ... expressionn\nMatch a sequence of expressions and return their match results in an array.\n\n##### expression { action }\nMatch the expression. If the match is successful, run the action, otherwise consider the match failed.\n\nThe action is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. The action should return some JavaScript value using the return statement. This value is considered match result of the preceding expression.\n\nTo indicate an error, the code inside the action can invoke the expected function, which makes the parser throw an exception. The function takes two parameters — a description of what was expected at the current position and optional location information (the default is what location would return — see below). The description will be used as part of a message of the thrown exception.\n\nThe code inside an action can also invoke the error function, which also makes the parser throw an exception. The function takes two parameters — an error message and optional location information (the default is what location would return — see below). The message will be used by the thrown exception.\n\nThe code inside the action can access all variables and functions defined in the initializer at the beginning of the grammar. Curly braces in the action code must be balanced.\n\nThe code inside the action can also access the text matched by the expression using the text function.\n\nThe code inside the action can also access location information using the location function. It returns an object like this:\n```javascript\n{\n  start: { offset: 23, line: 5, column: 6 },\n  end:   { offset: 25, line: 5, column: 8 }\n}\n```\nThe start property refers to the position at the beginning of the expression, the end property refers to position after the end of the expression. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.\n\nThe code inside the action can also access options passed to the parser using the options variable.\n\nNote that curly braces in the action code must be balanced.\n\n##### expression1 / expression2 / ... / expressionn\nTry to match the first expression, if it does not succeed, try the second one, etc. Return the match result of the first successfully matched expression. If no expression matches, consider the match failed.\n\n## Compatibility\nBoth the parser generator and generated parsers should run well in the following environments:\n\n* Node.js 0.10.0+\n* Internet Explorer 8+\n* Edge\n* Firefox\n* Chrome\n* Safari\n* Opera","source":"_posts/pegjs-document.md","raw":"---\ntitle: PEG.js Documentation\n---\n\n# Table of Contents\n#### Installation\n* Node.js\n* Browser\n\n#### Generating a Parser\n* Command Line\n* JavaScript API\n\n#### Using the Parser\n\n#### Grammar Syntax and Semantics\n* Parsing Expression Types\n\n#### Compatibility\n\n## Installation\n\n## Node.js\n要使用`pegjs`命令的话, 需要使用全局模式安装`PEG.js`:\n```\n$ npm install -g pegjs\n```\n要使用`JavaScript API`, 需要使用`locally`模式安装 `PEG.js` :\n```\n$ npm install pegjs\n```\n如果既要使用`pegjs`命令又要使用JavaScript API, 那么你需要将上面俩种方式都安装一遍.\n\n### Browser\n通过`Bower`安装 `PEG.js`:\n```\n$ bower install pegjs\n```\n\n## Generating a Parser\nPEG.js generates parser from a grammar that describes expected input and can specify what the parser returns (using semantic actions on matched parts of the input). Generated parser itself is a JavaScript object with a simple API.\n\n`PEG.js`根据一个grammar生成parser, 我们可以描述这个grammar希望获得怎么样的输入以及指定parser返回的内容(using semantic actions on matched parts of the input). 通过一个简单api就可以可以生成一个parser JS对象.\n\n### Command Line\nTo generate a parser from your grammar, use the pegjs command:\n想要将你的grammar生成parser, 直接像下面这样使用`pegjs`命令就好:\n```\n$ pegjs arithmetics.pegjs\n```\nThis writes parser source code into a file with the same name as the grammar file but with “.js” extension. You can also specify the output file explicitly:\n上面的命令会将生成的parser的源码输出到与grammar文件同名的js结尾的文件中. 我们也可以像下面这样输出到指定文件中:\n```\n$ pegjs -o arithmetics-parser.js arithmetics.pegjs\n```\nIf you omit both input and output file, standard input and output are used.\n但是如果你将输入输出文件都忽略了, 那么系统将会采用标准输入输出.\n\nBy default, the generated parser is in the Node.js module format. You can override this using the * --format option.\n在默认设置下, 生成的parser代码是以Node.js module format 进行格式化的, 你可以通过指定`--format`选项来改变它.\n\nYou can tweak the generated parser with several options:\n你可以通过如下几个命令来修改生成的parser的默认行为.\n\n* --allowed-start-rules: Comma-separated list of rules the parser will be allowed to start parsing from (default: the first rule in the grammar).\n* --cache\nMakes the parser cache results, avoiding exponential parsing time in pathological cases but making the parser slower.\n* --dependency\nMakes the parser require a specified dependency (can be specified multiple times).\n* --export-var\nName of a global variable into which the parser object is assigned to when no module loader is detected.\n* --extra-options\nAdditional options (in JSON format) to pass to peg.generate.\n* --extra-options-file\nFile with additional options (in JSON format) to pass to peg.generate.\n* --format\nFormat of the generated parser: amd, commonjs, globals, umd (default: commonjs).\n* --optimize\nSelects between optimizing the generated parser for parsing speed (speed) or code size (size) (default: speed)\n* --plugin\nMakes PEG.js use a specified plugin (can be specified multiple times).\n* --trace\nMakes the parser trace its progress.\n\n### JavaScript API\nIn Node.js, require the PEG.js parser generator module:\n```javascript\nvar peg = require(\"pegjs\");\n```\nIn browser, include the PEG.js library in your web page or application using the `<script>` tag. If PEG.js detects an AMD loader, it will define itself as a module, otherwise the API will be available in the peg global object.\n\nTo generate a parser, call the peg.generate method and pass your grammar as a parameter:\n```javascript\nvar parser = peg.generate(\"start = ('a' / 'b')+\");\n```\nThe method will return generated parser object or its source code as a string (depending on the value of the output option — see below). It will throw an exception if the grammar is invalid. The exception will contain message property with more details about the error.\n\nYou can tweak the generated parser by passing a second parameter with an options object to peg.generate. The following options are supported:\n\n* allowedStartRules: Rules the parser will be allowed to start parsing from (default: the first rule in the grammar).\n* cache: If true, makes the parser cache results, avoiding exponential parsing time in pathological cases but making the parser slower (default: false).\n* dependencies\nParser dependencies, the value is an object which maps variables used to access the dependencies in the parser to module IDs used to load them; valid only when format is set to \"amd\", \"commonjs\", or \"umd\" (default: {}).\n* exportVar\nName of a global variable into which the parser object is assigned to when no module loader is detected; valid only when format is set to \"globals\" or \"umd\" (default: null).\n* format\nformat of the generated parser (\"amd\", \"bare\", \"commonjs\", \"globals\", or \"umd\"); valid only when output is set to \"source\" (default: \"bare\").\n* optimize\nSelects between optimizing the generated parser for parsing speed (\"speed\") or code size (\"size\") (default: \"speed\").\n* output\nIf set to \"parser\", the method will return generated parser object; if set to \"source\", it will return parser source code as a string (default: \"parser\").\n* plugins\nPlugins to use.\n* trace\nMakes the parser trace its progress (default: false).\n\n## Using the Parser\nUsing the generated parser is simple — just call its parse method and pass an input string as a parameter. The method will return a parse result (the exact value depends on the grammar used to generate the parser) or throw an exception if the input is invalid. The exception will contain location, expected, found and message properties with more details about the error.\n```javascript\nparser.parse(\"abba\"); // returns [\"a\", \"b\", \"b\", \"a\"]\n\nparser.parse(\"abcd\"); // throws an exception \n```\nYou can tweak parser behavior by passing a second parameter with an options object to the parse method. The following options are supported:\n\n* startRule: Name of the rule to start parsing from.\n* tracer: Tracer to use.\n\nParsers can also support their own custom options.\n\n## Grammar Syntax and Semantics\nThe grammar syntax is similar to JavaScript in that it is not line-oriented and ignores whitespace between tokens. You can also use JavaScript-style comments (// ... and /* ... */).\n\nLet's look at example grammar that recognizes simple arithmetic expressions like 2*(3+4). A parser generated from this grammar computes their values.\n```javascript\nstart\n  = additive\n\nadditive\n  = left:multiplicative \"+\" right:additive { return left + right; }\n  / multiplicative\n\nmultiplicative\n  = left:primary \"*\" right:multiplicative { return left * right; }\n  / primary\n\nprimary\n  = integer\n  / \"(\" additive:additive \")\" { return additive; }\n\ninteger \"integer\"\n  = digits:[0-9]+ { return parseInt(digits.join(\"\"), 10); }\n```\n\nOn the top level, the grammar consists of rules (in our example, there are five of them). Each rule has a name (e.g. integer) that identifies the rule, and a parsing expression (e.g. digits:[0-9]+ { return parseInt(digits.join(\"\"), 10); }) that defines a pattern to match against the input text and possibly contains some JavaScript code that determines what happens when the pattern matches successfully. A rule can also contain human-readable name that is used in error messages (in our example, only the integer rule has a human-readable name). The parsing starts at the first rule, which is also called the start rule.\n\nA rule name must be a JavaScript identifier. It is followed by an equality sign (“=”) and a parsing expression. If the rule has a human-readable name, it is written as a JavaScript string between the name and separating equality sign. Rules need to be separated only by whitespace (their beginning is easily recognizable), but a semicolon (“;”) after the parsing expression is allowed.\n\nThe first rule can be preceded by an initializer — a piece of JavaScript code in curly braces (“{” and “}”). This code is executed before the generated parser starts parsing. All variables and functions defined in the initializer are accessible in rule actions and semantic predicates. The code inside the initializer can access options passed to the parser using the options variable. Curly braces in the initializer code must be balanced. Let's look at the example grammar from above using a simple initializer.\n```javascript\n{\n  function makeInteger(o) {\n    return parseInt(o.join(\"\"), 10);\n  }\n}\n\nstart\n  = additive\n\nadditive\n  = left:multiplicative \"+\" right:additive { return left + right; }\n  / multiplicative\n\nmultiplicative\n  = left:primary \"*\" right:multiplicative { return left * right; }\n  / primary\n\nprimary\n  = integer\n  / \"(\" additive:additive \")\" { return additive; }\n\ninteger \"integer\"\n  = digits:[0-9]+ { return makeInteger(digits); }\n```\nThe parsing expressions of the rules are used to match the input text to the grammar. There are various types of expressions — matching characters or character classes, indicating optional parts and repetition, etc. Expressions can also contain references to other rules. See detailed description below.\n\nIf an expression successfully matches a part of the text when running the generated parser, it produces a match result, which is a JavaScript value. For example:\n\n* An expression matching a literal string produces a JavaScript string containing matched text.\n* An expression matching repeated occurrence of some subexpression produces a JavaScript array with all the matches.\n\nThe match results propagate through the rules when the rule names are used in expressions, up to the start rule. The generated parser returns start rule's match result when parsing is successful.\n\nOne special case of parser expression is a parser action — a piece of JavaScript code inside curly braces (“{” and “}”) that takes match results of some of the the preceding expressions and returns a JavaScript value. This value is considered match result of the preceding expression (in other words, the parser action is a match result transformer).\n\nIn our arithmetics example, there are many parser actions. Consider the action in expression digits:[0-9]+ { return parseInt(digits.join(\"\"), 10); }. It takes the match result of the expression [0-9]+, which is an array of strings containing digits, as its parameter. It joins the digits together to form a number and converts it to a JavaScript number object.\n\n### Parsing Expression Types\nThere are several types of parsing expressions, some of them containing subexpressions and thus forming a recursive structure:\n\n##### \"literal\"\n##### 'literal'\nMatch exact literal string and return it. The string syntax is the same as in JavaScript. Appending i right after the literal makes the match case-insensitive.\n\n##### .\nMatch exactly one character and return it as a string.\n\n##### [characters]\nMatch one character from a set and return it as a string. The characters in the list can be escaped in exactly the same way as in JavaScript string. The list of characters can also contain ranges (e.g. [a-z] means “all lowercase letters”). Preceding the characters with ^ inverts the matched set (e.g. [^a-z] means “all character but lowercase letters”). Appending i right after the literal makes the match case-insensitive.\n\n##### rule\nMatch a parsing expression of a rule recursively and return its match result.\n\n##### ( expression )\nMatch a subexpression and return its match result.\n\n##### expression *\nMatch zero or more repetitions of the expression and return their match results in an array. The matching is greedy, i.e. the parser tries to match the expression as many times as possible. Unlike in regular expressions, there is no backtracking.\n\n##### expression +\nMatch one or more repetitions of the expression and return their match results in an array. The matching is greedy, i.e. the parser tries to match the expression as many times as possible. Unlike in regular expressions, there is no backtracking.\n\n##### expression ?\nTry to match the expression. If the match succeeds, return its match result, otherwise return null. Unlike in regular expressions, there is no backtracking.\n\n##### & expression\nTry to match the expression. If the match succeeds, just return undefined and do not consume any input, otherwise consider the match failed.\n\n##### ! expression\nTry to match the expression. If the match does not succeed, just return undefined and do not consume any input, otherwise consider the match failed.\n\n##### & { predicate }\nThe predicate is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. It should return some JavaScript value using the return statement. If the returned value evaluates to true in boolean context, just return undefined and do not consume any input; otherwise consider the match failed.\n\nThe code inside the predicate can access all variables and functions defined in the initializer at the beginning of the grammar.\n\nThe code inside the predicate can also access location information using the location function. It returns an object like this:\n```javascript\n{\n  start: { offset: 23, line: 5, column: 6 },\n  end:   { offset: 23, line: 5, column: 6 }\n}\n```\nThe start and end properties both refer to the current parse position. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.\n\nThe code inside the predicate can also access options passed to the parser using the options variable.\n\nNote that curly braces in the predicate code must be balanced.\n\n##### ! { predicate }\nThe predicate is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. It should return some JavaScript value using the return statement. If the returned value evaluates to false in boolean context, just return undefined and do not consume any input; otherwise consider the match failed.\n\nThe code inside the predicate can access all variables and functions defined in the initializer at the beginning of the grammar.\n\nThe code inside the predicate can also access location information using the location function. It returns an object like this:\n```javascript\n{\n  start: { offset: 23, line: 5, column: 6 },\n  end:   { offset: 23, line: 5, column: 6 }\n}\n```\nThe start and end properties both refer to the current parse position. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.\n\nThe code inside the predicate can also access options passed to the parser using the options variable.\n\nNote that curly braces in the predicate code must be balanced.\n\n##### $ expression\nTry to match the expression. If the match succeeds, return the matched text instead of the match result.\n\n##### label : expression\nMatch the expression and remember its match result under given label. The label must be a JavaScript identifier.\n\nLabeled expressions are useful together with actions, where saved match results can be accessed by action's JavaScript code.\n\n##### expression1 expression2 ... expressionn\nMatch a sequence of expressions and return their match results in an array.\n\n##### expression { action }\nMatch the expression. If the match is successful, run the action, otherwise consider the match failed.\n\nThe action is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. The action should return some JavaScript value using the return statement. This value is considered match result of the preceding expression.\n\nTo indicate an error, the code inside the action can invoke the expected function, which makes the parser throw an exception. The function takes two parameters — a description of what was expected at the current position and optional location information (the default is what location would return — see below). The description will be used as part of a message of the thrown exception.\n\nThe code inside an action can also invoke the error function, which also makes the parser throw an exception. The function takes two parameters — an error message and optional location information (the default is what location would return — see below). The message will be used by the thrown exception.\n\nThe code inside the action can access all variables and functions defined in the initializer at the beginning of the grammar. Curly braces in the action code must be balanced.\n\nThe code inside the action can also access the text matched by the expression using the text function.\n\nThe code inside the action can also access location information using the location function. It returns an object like this:\n```javascript\n{\n  start: { offset: 23, line: 5, column: 6 },\n  end:   { offset: 25, line: 5, column: 8 }\n}\n```\nThe start property refers to the position at the beginning of the expression, the end property refers to position after the end of the expression. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.\n\nThe code inside the action can also access options passed to the parser using the options variable.\n\nNote that curly braces in the action code must be balanced.\n\n##### expression1 / expression2 / ... / expressionn\nTry to match the first expression, if it does not succeed, try the second one, etc. Return the match result of the first successfully matched expression. If no expression matches, consider the match failed.\n\n## Compatibility\nBoth the parser generator and generated parsers should run well in the following environments:\n\n* Node.js 0.10.0+\n* Internet Explorer 8+\n* Edge\n* Firefox\n* Chrome\n* Safari\n* Opera","slug":"pegjs-document","published":1,"date":"2018-11-17T07:15:38.000Z","updated":"2018-11-17T11:40:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoljno5p0002uds6orfpyal7","content":"<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h1><h4 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h4><ul>\n<li>Node.js</li>\n<li>Browser</li>\n</ul>\n<h4 id=\"Generating-a-Parser\"><a href=\"#Generating-a-Parser\" class=\"headerlink\" title=\"Generating a Parser\"></a>Generating a Parser</h4><ul>\n<li>Command Line</li>\n<li>JavaScript API</li>\n</ul>\n<h4 id=\"Using-the-Parser\"><a href=\"#Using-the-Parser\" class=\"headerlink\" title=\"Using the Parser\"></a>Using the Parser</h4><h4 id=\"Grammar-Syntax-and-Semantics\"><a href=\"#Grammar-Syntax-and-Semantics\" class=\"headerlink\" title=\"Grammar Syntax and Semantics\"></a>Grammar Syntax and Semantics</h4><ul>\n<li>Parsing Expression Types</li>\n</ul>\n<h4 id=\"Compatibility\"><a href=\"#Compatibility\" class=\"headerlink\" title=\"Compatibility\"></a>Compatibility</h4><h2 id=\"Installation-1\"><a href=\"#Installation-1\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p>要使用<code>pegjs</code>命令的话, 需要使用全局模式安装<code>PEG.js</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g pegjs</span><br></pre></td></tr></table></figure></p>\n<p>要使用<code>JavaScript API</code>, 需要使用<code>locally</code>模式安装 <code>PEG.js</code> :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install pegjs</span><br></pre></td></tr></table></figure></p>\n<p>如果既要使用<code>pegjs</code>命令又要使用JavaScript API, 那么你需要将上面俩种方式都安装一遍.</p>\n<h3 id=\"Browser\"><a href=\"#Browser\" class=\"headerlink\" title=\"Browser\"></a>Browser</h3><p>通过<code>Bower</code>安装 <code>PEG.js</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bower install pegjs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Generating-a-Parser-1\"><a href=\"#Generating-a-Parser-1\" class=\"headerlink\" title=\"Generating a Parser\"></a>Generating a Parser</h2><p>PEG.js generates parser from a grammar that describes expected input and can specify what the parser returns (using semantic actions on matched parts of the input). Generated parser itself is a JavaScript object with a simple API.</p>\n<p><code>PEG.js</code>根据一个grammar生成parser, 我们可以描述这个grammar希望获得怎么样的输入以及指定parser返回的内容(using semantic actions on matched parts of the input). 通过一个简单api就可以可以生成一个parser JS对象.</p>\n<h3 id=\"Command-Line\"><a href=\"#Command-Line\" class=\"headerlink\" title=\"Command Line\"></a>Command Line</h3><p>To generate a parser from your grammar, use the pegjs command:<br>想要将你的grammar生成parser, 直接像下面这样使用<code>pegjs</code>命令就好:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pegjs arithmetics.pegjs</span><br></pre></td></tr></table></figure></p>\n<p>This writes parser source code into a file with the same name as the grammar file but with “.js” extension. You can also specify the output file explicitly:<br>上面的命令会将生成的parser的源码输出到与grammar文件同名的js结尾的文件中. 我们也可以像下面这样输出到指定文件中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pegjs -o arithmetics-parser.js arithmetics.pegjs</span><br></pre></td></tr></table></figure></p>\n<p>If you omit both input and output file, standard input and output are used.<br>但是如果你将输入输出文件都忽略了, 那么系统将会采用标准输入输出.</p>\n<p>By default, the generated parser is in the Node.js module format. You can override this using the * –format option.<br>在默认设置下, 生成的parser代码是以Node.js module format 进行格式化的, 你可以通过指定<code>--format</code>选项来改变它.</p>\n<p>You can tweak the generated parser with several options:<br>你可以通过如下几个命令来修改生成的parser的默认行为.</p>\n<ul>\n<li>–allowed-start-rules: Comma-separated list of rules the parser will be allowed to start parsing from (default: the first rule in the grammar).</li>\n<li>–cache<br>Makes the parser cache results, avoiding exponential parsing time in pathological cases but making the parser slower.</li>\n<li>–dependency<br>Makes the parser require a specified dependency (can be specified multiple times).</li>\n<li>–export-var<br>Name of a global variable into which the parser object is assigned to when no module loader is detected.</li>\n<li>–extra-options<br>Additional options (in JSON format) to pass to peg.generate.</li>\n<li>–extra-options-file<br>File with additional options (in JSON format) to pass to peg.generate.</li>\n<li>–format<br>Format of the generated parser: amd, commonjs, globals, umd (default: commonjs).</li>\n<li>–optimize<br>Selects between optimizing the generated parser for parsing speed (speed) or code size (size) (default: speed)</li>\n<li>–plugin<br>Makes PEG.js use a specified plugin (can be specified multiple times).</li>\n<li>–trace<br>Makes the parser trace its progress.</li>\n</ul>\n<h3 id=\"JavaScript-API\"><a href=\"#JavaScript-API\" class=\"headerlink\" title=\"JavaScript API\"></a>JavaScript API</h3><p>In Node.js, require the PEG.js parser generator module:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> peg = <span class=\"built_in\">require</span>(<span class=\"string\">\"pegjs\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>In browser, include the PEG.js library in your web page or application using the <code>&lt;script&gt;</code> tag. If PEG.js detects an AMD loader, it will define itself as a module, otherwise the API will be available in the peg global object.</p>\n<p>To generate a parser, call the peg.generate method and pass your grammar as a parameter:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parser = peg.generate(<span class=\"string\">\"start = ('a' / 'b')+\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>The method will return generated parser object or its source code as a string (depending on the value of the output option — see below). It will throw an exception if the grammar is invalid. The exception will contain message property with more details about the error.</p>\n<p>You can tweak the generated parser by passing a second parameter with an options object to peg.generate. The following options are supported:</p>\n<ul>\n<li>allowedStartRules: Rules the parser will be allowed to start parsing from (default: the first rule in the grammar).</li>\n<li>cache: If true, makes the parser cache results, avoiding exponential parsing time in pathological cases but making the parser slower (default: false).</li>\n<li>dependencies<br>Parser dependencies, the value is an object which maps variables used to access the dependencies in the parser to module IDs used to load them; valid only when format is set to “amd”, “commonjs”, or “umd” (default: {}).</li>\n<li>exportVar<br>Name of a global variable into which the parser object is assigned to when no module loader is detected; valid only when format is set to “globals” or “umd” (default: null).</li>\n<li>format<br>format of the generated parser (“amd”, “bare”, “commonjs”, “globals”, or “umd”); valid only when output is set to “source” (default: “bare”).</li>\n<li>optimize<br>Selects between optimizing the generated parser for parsing speed (“speed”) or code size (“size”) (default: “speed”).</li>\n<li>output<br>If set to “parser”, the method will return generated parser object; if set to “source”, it will return parser source code as a string (default: “parser”).</li>\n<li>plugins<br>Plugins to use.</li>\n<li>trace<br>Makes the parser trace its progress (default: false).</li>\n</ul>\n<h2 id=\"Using-the-Parser-1\"><a href=\"#Using-the-Parser-1\" class=\"headerlink\" title=\"Using the Parser\"></a>Using the Parser</h2><p>Using the generated parser is simple — just call its parse method and pass an input string as a parameter. The method will return a parse result (the exact value depends on the grammar used to generate the parser) or throw an exception if the input is invalid. The exception will contain location, expected, found and message properties with more details about the error.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.parse(<span class=\"string\">\"abba\"</span>); <span class=\"comment\">// returns [\"a\", \"b\", \"b\", \"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">parser.parse(<span class=\"string\">\"abcd\"</span>); <span class=\"comment\">// throws an exception</span></span><br></pre></td></tr></table></figure></p>\n<p>You can tweak parser behavior by passing a second parameter with an options object to the parse method. The following options are supported:</p>\n<ul>\n<li>startRule: Name of the rule to start parsing from.</li>\n<li>tracer: Tracer to use.</li>\n</ul>\n<p>Parsers can also support their own custom options.</p>\n<h2 id=\"Grammar-Syntax-and-Semantics-1\"><a href=\"#Grammar-Syntax-and-Semantics-1\" class=\"headerlink\" title=\"Grammar Syntax and Semantics\"></a>Grammar Syntax and Semantics</h2><p>The grammar syntax is similar to JavaScript in that it is not line-oriented and ignores whitespace between tokens. You can also use JavaScript-style comments (// … and /<em> … </em>/).</p>\n<p>Let’s look at example grammar that recognizes simple arithmetic expressions like 2*(3+4). A parser generated from this grammar computes their values.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start</span><br><span class=\"line\">  = additive</span><br><span class=\"line\"></span><br><span class=\"line\">additive</span><br><span class=\"line\">  = left:multiplicative <span class=\"string\">\"+\"</span> right:additive &#123; <span class=\"keyword\">return</span> left + right; &#125;</span><br><span class=\"line\">  / multiplicative</span><br><span class=\"line\"></span><br><span class=\"line\">multiplicative</span><br><span class=\"line\">  = left:primary <span class=\"string\">\"*\"</span> right:multiplicative &#123; <span class=\"keyword\">return</span> left * right; &#125;</span><br><span class=\"line\">  / primary</span><br><span class=\"line\"></span><br><span class=\"line\">primary</span><br><span class=\"line\">  = integer</span><br><span class=\"line\">  / <span class=\"string\">\"(\"</span> additive:additive <span class=\"string\">\")\"</span> &#123; <span class=\"keyword\">return</span> additive; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">integer <span class=\"string\">\"integer\"</span></span><br><span class=\"line\">  = digits:[<span class=\"number\">0</span><span class=\"number\">-9</span>]+ &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(digits.join(<span class=\"string\">\"\"</span>), <span class=\"number\">10</span>); &#125;</span><br></pre></td></tr></table></figure></p>\n<p>On the top level, the grammar consists of rules (in our example, there are five of them). Each rule has a name (e.g. integer) that identifies the rule, and a parsing expression (e.g. digits:[0-9]+ { return parseInt(digits.join(“”), 10); }) that defines a pattern to match against the input text and possibly contains some JavaScript code that determines what happens when the pattern matches successfully. A rule can also contain human-readable name that is used in error messages (in our example, only the integer rule has a human-readable name). The parsing starts at the first rule, which is also called the start rule.</p>\n<p>A rule name must be a JavaScript identifier. It is followed by an equality sign (“=”) and a parsing expression. If the rule has a human-readable name, it is written as a JavaScript string between the name and separating equality sign. Rules need to be separated only by whitespace (their beginning is easily recognizable), but a semicolon (“;”) after the parsing expression is allowed.</p>\n<p>The first rule can be preceded by an initializer — a piece of JavaScript code in curly braces (“{” and “}”). This code is executed before the generated parser starts parsing. All variables and functions defined in the initializer are accessible in rule actions and semantic predicates. The code inside the initializer can access options passed to the parser using the options variable. Curly braces in the initializer code must be balanced. Let’s look at the example grammar from above using a simple initializer.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeInteger</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(o.join(<span class=\"string\">\"\"</span>), <span class=\"number\">10</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start</span><br><span class=\"line\">  = additive</span><br><span class=\"line\"></span><br><span class=\"line\">additive</span><br><span class=\"line\">  = left:multiplicative <span class=\"string\">\"+\"</span> right:additive &#123; <span class=\"keyword\">return</span> left + right; &#125;</span><br><span class=\"line\">  / multiplicative</span><br><span class=\"line\"></span><br><span class=\"line\">multiplicative</span><br><span class=\"line\">  = left:primary <span class=\"string\">\"*\"</span> right:multiplicative &#123; <span class=\"keyword\">return</span> left * right; &#125;</span><br><span class=\"line\">  / primary</span><br><span class=\"line\"></span><br><span class=\"line\">primary</span><br><span class=\"line\">  = integer</span><br><span class=\"line\">  / <span class=\"string\">\"(\"</span> additive:additive <span class=\"string\">\")\"</span> &#123; <span class=\"keyword\">return</span> additive; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">integer <span class=\"string\">\"integer\"</span></span><br><span class=\"line\">  = digits:[<span class=\"number\">0</span><span class=\"number\">-9</span>]+ &#123; <span class=\"keyword\">return</span> makeInteger(digits); &#125;</span><br></pre></td></tr></table></figure></p>\n<p>The parsing expressions of the rules are used to match the input text to the grammar. There are various types of expressions — matching characters or character classes, indicating optional parts and repetition, etc. Expressions can also contain references to other rules. See detailed description below.</p>\n<p>If an expression successfully matches a part of the text when running the generated parser, it produces a match result, which is a JavaScript value. For example:</p>\n<ul>\n<li>An expression matching a literal string produces a JavaScript string containing matched text.</li>\n<li>An expression matching repeated occurrence of some subexpression produces a JavaScript array with all the matches.</li>\n</ul>\n<p>The match results propagate through the rules when the rule names are used in expressions, up to the start rule. The generated parser returns start rule’s match result when parsing is successful.</p>\n<p>One special case of parser expression is a parser action — a piece of JavaScript code inside curly braces (“{” and “}”) that takes match results of some of the the preceding expressions and returns a JavaScript value. This value is considered match result of the preceding expression (in other words, the parser action is a match result transformer).</p>\n<p>In our arithmetics example, there are many parser actions. Consider the action in expression digits:[0-9]+ { return parseInt(digits.join(“”), 10); }. It takes the match result of the expression [0-9]+, which is an array of strings containing digits, as its parameter. It joins the digits together to form a number and converts it to a JavaScript number object.</p>\n<h3 id=\"Parsing-Expression-Types\"><a href=\"#Parsing-Expression-Types\" class=\"headerlink\" title=\"Parsing Expression Types\"></a>Parsing Expression Types</h3><p>There are several types of parsing expressions, some of them containing subexpressions and thus forming a recursive structure:</p>\n<h5 id=\"“literal”\"><a href=\"#“literal”\" class=\"headerlink\" title=\"“literal”\"></a>“literal”</h5><h5 id=\"‘literal’\"><a href=\"#‘literal’\" class=\"headerlink\" title=\"‘literal’\"></a>‘literal’</h5><p>Match exact literal string and return it. The string syntax is the same as in JavaScript. Appending i right after the literal makes the match case-insensitive.</p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\".\"></a>.</h5><p>Match exactly one character and return it as a string.</p>\n<h5 id=\"characters\"><a href=\"#characters\" class=\"headerlink\" title=\"[characters]\"></a>[characters]</h5><p>Match one character from a set and return it as a string. The characters in the list can be escaped in exactly the same way as in JavaScript string. The list of characters can also contain ranges (e.g. [a-z] means “all lowercase letters”). Preceding the characters with ^ inverts the matched set (e.g. [^a-z] means “all character but lowercase letters”). Appending i right after the literal makes the match case-insensitive.</p>\n<h5 id=\"rule\"><a href=\"#rule\" class=\"headerlink\" title=\"rule\"></a>rule</h5><p>Match a parsing expression of a rule recursively and return its match result.</p>\n<h5 id=\"expression\"><a href=\"#expression\" class=\"headerlink\" title=\"( expression )\"></a>( expression )</h5><p>Match a subexpression and return its match result.</p>\n<h5 id=\"expression-1\"><a href=\"#expression-1\" class=\"headerlink\" title=\"expression *\"></a>expression *</h5><p>Match zero or more repetitions of the expression and return their match results in an array. The matching is greedy, i.e. the parser tries to match the expression as many times as possible. Unlike in regular expressions, there is no backtracking.</p>\n<h5 id=\"expression-2\"><a href=\"#expression-2\" class=\"headerlink\" title=\"expression +\"></a>expression +</h5><p>Match one or more repetitions of the expression and return their match results in an array. The matching is greedy, i.e. the parser tries to match the expression as many times as possible. Unlike in regular expressions, there is no backtracking.</p>\n<h5 id=\"expression-3\"><a href=\"#expression-3\" class=\"headerlink\" title=\"expression ?\"></a>expression ?</h5><p>Try to match the expression. If the match succeeds, return its match result, otherwise return null. Unlike in regular expressions, there is no backtracking.</p>\n<h5 id=\"amp-expression\"><a href=\"#amp-expression\" class=\"headerlink\" title=\"&amp; expression\"></a>&amp; expression</h5><p>Try to match the expression. If the match succeeds, just return undefined and do not consume any input, otherwise consider the match failed.</p>\n<h5 id=\"expression-4\"><a href=\"#expression-4\" class=\"headerlink\" title=\"! expression\"></a>! expression</h5><p>Try to match the expression. If the match does not succeed, just return undefined and do not consume any input, otherwise consider the match failed.</p>\n<h5 id=\"amp-predicate\"><a href=\"#amp-predicate\" class=\"headerlink\" title=\"&amp; { predicate }\"></a>&amp; { predicate }</h5><p>The predicate is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. It should return some JavaScript value using the return statement. If the returned value evaluates to true in boolean context, just return undefined and do not consume any input; otherwise consider the match failed.</p>\n<p>The code inside the predicate can access all variables and functions defined in the initializer at the beginning of the grammar.</p>\n<p>The code inside the predicate can also access location information using the location function. It returns an object like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  start: &#123; <span class=\"attr\">offset</span>: <span class=\"number\">23</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  end:   &#123; <span class=\"attr\">offset</span>: <span class=\"number\">23</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">6</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The start and end properties both refer to the current parse position. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.</p>\n<p>The code inside the predicate can also access options passed to the parser using the options variable.</p>\n<p>Note that curly braces in the predicate code must be balanced.</p>\n<h5 id=\"predicate\"><a href=\"#predicate\" class=\"headerlink\" title=\"! { predicate }\"></a>! { predicate }</h5><p>The predicate is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. It should return some JavaScript value using the return statement. If the returned value evaluates to false in boolean context, just return undefined and do not consume any input; otherwise consider the match failed.</p>\n<p>The code inside the predicate can access all variables and functions defined in the initializer at the beginning of the grammar.</p>\n<p>The code inside the predicate can also access location information using the location function. It returns an object like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  start: &#123; <span class=\"attr\">offset</span>: <span class=\"number\">23</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  end:   &#123; <span class=\"attr\">offset</span>: <span class=\"number\">23</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">6</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The start and end properties both refer to the current parse position. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.</p>\n<p>The code inside the predicate can also access options passed to the parser using the options variable.</p>\n<p>Note that curly braces in the predicate code must be balanced.</p>\n<h5 id=\"expression-5\"><a href=\"#expression-5\" class=\"headerlink\" title=\"$ expression\"></a>$ expression</h5><p>Try to match the expression. If the match succeeds, return the matched text instead of the match result.</p>\n<h5 id=\"label-expression\"><a href=\"#label-expression\" class=\"headerlink\" title=\"label : expression\"></a>label : expression</h5><p>Match the expression and remember its match result under given label. The label must be a JavaScript identifier.</p>\n<p>Labeled expressions are useful together with actions, where saved match results can be accessed by action’s JavaScript code.</p>\n<h5 id=\"expression1-expression2-…-expressionn\"><a href=\"#expression1-expression2-…-expressionn\" class=\"headerlink\" title=\"expression1 expression2 … expressionn\"></a>expression1 expression2 … expressionn</h5><p>Match a sequence of expressions and return their match results in an array.</p>\n<h5 id=\"expression-action\"><a href=\"#expression-action\" class=\"headerlink\" title=\"expression { action }\"></a>expression { action }</h5><p>Match the expression. If the match is successful, run the action, otherwise consider the match failed.</p>\n<p>The action is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. The action should return some JavaScript value using the return statement. This value is considered match result of the preceding expression.</p>\n<p>To indicate an error, the code inside the action can invoke the expected function, which makes the parser throw an exception. The function takes two parameters — a description of what was expected at the current position and optional location information (the default is what location would return — see below). The description will be used as part of a message of the thrown exception.</p>\n<p>The code inside an action can also invoke the error function, which also makes the parser throw an exception. The function takes two parameters — an error message and optional location information (the default is what location would return — see below). The message will be used by the thrown exception.</p>\n<p>The code inside the action can access all variables and functions defined in the initializer at the beginning of the grammar. Curly braces in the action code must be balanced.</p>\n<p>The code inside the action can also access the text matched by the expression using the text function.</p>\n<p>The code inside the action can also access location information using the location function. It returns an object like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  start: &#123; <span class=\"attr\">offset</span>: <span class=\"number\">23</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  end:   &#123; <span class=\"attr\">offset</span>: <span class=\"number\">25</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">8</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The start property refers to the position at the beginning of the expression, the end property refers to position after the end of the expression. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.</p>\n<p>The code inside the action can also access options passed to the parser using the options variable.</p>\n<p>Note that curly braces in the action code must be balanced.</p>\n<h5 id=\"expression1-expression2-…-expressionn-1\"><a href=\"#expression1-expression2-…-expressionn-1\" class=\"headerlink\" title=\"expression1 / expression2 / … / expressionn\"></a>expression1 / expression2 / … / expressionn</h5><p>Try to match the first expression, if it does not succeed, try the second one, etc. Return the match result of the first successfully matched expression. If no expression matches, consider the match failed.</p>\n<h2 id=\"Compatibility-1\"><a href=\"#Compatibility-1\" class=\"headerlink\" title=\"Compatibility\"></a>Compatibility</h2><p>Both the parser generator and generated parsers should run well in the following environments:</p>\n<ul>\n<li>Node.js 0.10.0+</li>\n<li>Internet Explorer 8+</li>\n<li>Edge</li>\n<li>Firefox</li>\n<li>Chrome</li>\n<li>Safari</li>\n<li>Opera</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h1><h4 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h4><ul>\n<li>Node.js</li>\n<li>Browser</li>\n</ul>\n<h4 id=\"Generating-a-Parser\"><a href=\"#Generating-a-Parser\" class=\"headerlink\" title=\"Generating a Parser\"></a>Generating a Parser</h4><ul>\n<li>Command Line</li>\n<li>JavaScript API</li>\n</ul>\n<h4 id=\"Using-the-Parser\"><a href=\"#Using-the-Parser\" class=\"headerlink\" title=\"Using the Parser\"></a>Using the Parser</h4><h4 id=\"Grammar-Syntax-and-Semantics\"><a href=\"#Grammar-Syntax-and-Semantics\" class=\"headerlink\" title=\"Grammar Syntax and Semantics\"></a>Grammar Syntax and Semantics</h4><ul>\n<li>Parsing Expression Types</li>\n</ul>\n<h4 id=\"Compatibility\"><a href=\"#Compatibility\" class=\"headerlink\" title=\"Compatibility\"></a>Compatibility</h4><h2 id=\"Installation-1\"><a href=\"#Installation-1\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p>要使用<code>pegjs</code>命令的话, 需要使用全局模式安装<code>PEG.js</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g pegjs</span><br></pre></td></tr></table></figure></p>\n<p>要使用<code>JavaScript API</code>, 需要使用<code>locally</code>模式安装 <code>PEG.js</code> :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install pegjs</span><br></pre></td></tr></table></figure></p>\n<p>如果既要使用<code>pegjs</code>命令又要使用JavaScript API, 那么你需要将上面俩种方式都安装一遍.</p>\n<h3 id=\"Browser\"><a href=\"#Browser\" class=\"headerlink\" title=\"Browser\"></a>Browser</h3><p>通过<code>Bower</code>安装 <code>PEG.js</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bower install pegjs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Generating-a-Parser-1\"><a href=\"#Generating-a-Parser-1\" class=\"headerlink\" title=\"Generating a Parser\"></a>Generating a Parser</h2><p>PEG.js generates parser from a grammar that describes expected input and can specify what the parser returns (using semantic actions on matched parts of the input). Generated parser itself is a JavaScript object with a simple API.</p>\n<p><code>PEG.js</code>根据一个grammar生成parser, 我们可以描述这个grammar希望获得怎么样的输入以及指定parser返回的内容(using semantic actions on matched parts of the input). 通过一个简单api就可以可以生成一个parser JS对象.</p>\n<h3 id=\"Command-Line\"><a href=\"#Command-Line\" class=\"headerlink\" title=\"Command Line\"></a>Command Line</h3><p>To generate a parser from your grammar, use the pegjs command:<br>想要将你的grammar生成parser, 直接像下面这样使用<code>pegjs</code>命令就好:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pegjs arithmetics.pegjs</span><br></pre></td></tr></table></figure></p>\n<p>This writes parser source code into a file with the same name as the grammar file but with “.js” extension. You can also specify the output file explicitly:<br>上面的命令会将生成的parser的源码输出到与grammar文件同名的js结尾的文件中. 我们也可以像下面这样输出到指定文件中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pegjs -o arithmetics-parser.js arithmetics.pegjs</span><br></pre></td></tr></table></figure></p>\n<p>If you omit both input and output file, standard input and output are used.<br>但是如果你将输入输出文件都忽略了, 那么系统将会采用标准输入输出.</p>\n<p>By default, the generated parser is in the Node.js module format. You can override this using the * –format option.<br>在默认设置下, 生成的parser代码是以Node.js module format 进行格式化的, 你可以通过指定<code>--format</code>选项来改变它.</p>\n<p>You can tweak the generated parser with several options:<br>你可以通过如下几个命令来修改生成的parser的默认行为.</p>\n<ul>\n<li>–allowed-start-rules: Comma-separated list of rules the parser will be allowed to start parsing from (default: the first rule in the grammar).</li>\n<li>–cache<br>Makes the parser cache results, avoiding exponential parsing time in pathological cases but making the parser slower.</li>\n<li>–dependency<br>Makes the parser require a specified dependency (can be specified multiple times).</li>\n<li>–export-var<br>Name of a global variable into which the parser object is assigned to when no module loader is detected.</li>\n<li>–extra-options<br>Additional options (in JSON format) to pass to peg.generate.</li>\n<li>–extra-options-file<br>File with additional options (in JSON format) to pass to peg.generate.</li>\n<li>–format<br>Format of the generated parser: amd, commonjs, globals, umd (default: commonjs).</li>\n<li>–optimize<br>Selects between optimizing the generated parser for parsing speed (speed) or code size (size) (default: speed)</li>\n<li>–plugin<br>Makes PEG.js use a specified plugin (can be specified multiple times).</li>\n<li>–trace<br>Makes the parser trace its progress.</li>\n</ul>\n<h3 id=\"JavaScript-API\"><a href=\"#JavaScript-API\" class=\"headerlink\" title=\"JavaScript API\"></a>JavaScript API</h3><p>In Node.js, require the PEG.js parser generator module:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> peg = <span class=\"built_in\">require</span>(<span class=\"string\">\"pegjs\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>In browser, include the PEG.js library in your web page or application using the <code>&lt;script&gt;</code> tag. If PEG.js detects an AMD loader, it will define itself as a module, otherwise the API will be available in the peg global object.</p>\n<p>To generate a parser, call the peg.generate method and pass your grammar as a parameter:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parser = peg.generate(<span class=\"string\">\"start = ('a' / 'b')+\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>The method will return generated parser object or its source code as a string (depending on the value of the output option — see below). It will throw an exception if the grammar is invalid. The exception will contain message property with more details about the error.</p>\n<p>You can tweak the generated parser by passing a second parameter with an options object to peg.generate. The following options are supported:</p>\n<ul>\n<li>allowedStartRules: Rules the parser will be allowed to start parsing from (default: the first rule in the grammar).</li>\n<li>cache: If true, makes the parser cache results, avoiding exponential parsing time in pathological cases but making the parser slower (default: false).</li>\n<li>dependencies<br>Parser dependencies, the value is an object which maps variables used to access the dependencies in the parser to module IDs used to load them; valid only when format is set to “amd”, “commonjs”, or “umd” (default: {}).</li>\n<li>exportVar<br>Name of a global variable into which the parser object is assigned to when no module loader is detected; valid only when format is set to “globals” or “umd” (default: null).</li>\n<li>format<br>format of the generated parser (“amd”, “bare”, “commonjs”, “globals”, or “umd”); valid only when output is set to “source” (default: “bare”).</li>\n<li>optimize<br>Selects between optimizing the generated parser for parsing speed (“speed”) or code size (“size”) (default: “speed”).</li>\n<li>output<br>If set to “parser”, the method will return generated parser object; if set to “source”, it will return parser source code as a string (default: “parser”).</li>\n<li>plugins<br>Plugins to use.</li>\n<li>trace<br>Makes the parser trace its progress (default: false).</li>\n</ul>\n<h2 id=\"Using-the-Parser-1\"><a href=\"#Using-the-Parser-1\" class=\"headerlink\" title=\"Using the Parser\"></a>Using the Parser</h2><p>Using the generated parser is simple — just call its parse method and pass an input string as a parameter. The method will return a parse result (the exact value depends on the grammar used to generate the parser) or throw an exception if the input is invalid. The exception will contain location, expected, found and message properties with more details about the error.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.parse(<span class=\"string\">\"abba\"</span>); <span class=\"comment\">// returns [\"a\", \"b\", \"b\", \"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">parser.parse(<span class=\"string\">\"abcd\"</span>); <span class=\"comment\">// throws an exception</span></span><br></pre></td></tr></table></figure></p>\n<p>You can tweak parser behavior by passing a second parameter with an options object to the parse method. The following options are supported:</p>\n<ul>\n<li>startRule: Name of the rule to start parsing from.</li>\n<li>tracer: Tracer to use.</li>\n</ul>\n<p>Parsers can also support their own custom options.</p>\n<h2 id=\"Grammar-Syntax-and-Semantics-1\"><a href=\"#Grammar-Syntax-and-Semantics-1\" class=\"headerlink\" title=\"Grammar Syntax and Semantics\"></a>Grammar Syntax and Semantics</h2><p>The grammar syntax is similar to JavaScript in that it is not line-oriented and ignores whitespace between tokens. You can also use JavaScript-style comments (// … and /<em> … </em>/).</p>\n<p>Let’s look at example grammar that recognizes simple arithmetic expressions like 2*(3+4). A parser generated from this grammar computes their values.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start</span><br><span class=\"line\">  = additive</span><br><span class=\"line\"></span><br><span class=\"line\">additive</span><br><span class=\"line\">  = left:multiplicative <span class=\"string\">\"+\"</span> right:additive &#123; <span class=\"keyword\">return</span> left + right; &#125;</span><br><span class=\"line\">  / multiplicative</span><br><span class=\"line\"></span><br><span class=\"line\">multiplicative</span><br><span class=\"line\">  = left:primary <span class=\"string\">\"*\"</span> right:multiplicative &#123; <span class=\"keyword\">return</span> left * right; &#125;</span><br><span class=\"line\">  / primary</span><br><span class=\"line\"></span><br><span class=\"line\">primary</span><br><span class=\"line\">  = integer</span><br><span class=\"line\">  / <span class=\"string\">\"(\"</span> additive:additive <span class=\"string\">\")\"</span> &#123; <span class=\"keyword\">return</span> additive; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">integer <span class=\"string\">\"integer\"</span></span><br><span class=\"line\">  = digits:[<span class=\"number\">0</span><span class=\"number\">-9</span>]+ &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(digits.join(<span class=\"string\">\"\"</span>), <span class=\"number\">10</span>); &#125;</span><br></pre></td></tr></table></figure></p>\n<p>On the top level, the grammar consists of rules (in our example, there are five of them). Each rule has a name (e.g. integer) that identifies the rule, and a parsing expression (e.g. digits:[0-9]+ { return parseInt(digits.join(“”), 10); }) that defines a pattern to match against the input text and possibly contains some JavaScript code that determines what happens when the pattern matches successfully. A rule can also contain human-readable name that is used in error messages (in our example, only the integer rule has a human-readable name). The parsing starts at the first rule, which is also called the start rule.</p>\n<p>A rule name must be a JavaScript identifier. It is followed by an equality sign (“=”) and a parsing expression. If the rule has a human-readable name, it is written as a JavaScript string between the name and separating equality sign. Rules need to be separated only by whitespace (their beginning is easily recognizable), but a semicolon (“;”) after the parsing expression is allowed.</p>\n<p>The first rule can be preceded by an initializer — a piece of JavaScript code in curly braces (“{” and “}”). This code is executed before the generated parser starts parsing. All variables and functions defined in the initializer are accessible in rule actions and semantic predicates. The code inside the initializer can access options passed to the parser using the options variable. Curly braces in the initializer code must be balanced. Let’s look at the example grammar from above using a simple initializer.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeInteger</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(o.join(<span class=\"string\">\"\"</span>), <span class=\"number\">10</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start</span><br><span class=\"line\">  = additive</span><br><span class=\"line\"></span><br><span class=\"line\">additive</span><br><span class=\"line\">  = left:multiplicative <span class=\"string\">\"+\"</span> right:additive &#123; <span class=\"keyword\">return</span> left + right; &#125;</span><br><span class=\"line\">  / multiplicative</span><br><span class=\"line\"></span><br><span class=\"line\">multiplicative</span><br><span class=\"line\">  = left:primary <span class=\"string\">\"*\"</span> right:multiplicative &#123; <span class=\"keyword\">return</span> left * right; &#125;</span><br><span class=\"line\">  / primary</span><br><span class=\"line\"></span><br><span class=\"line\">primary</span><br><span class=\"line\">  = integer</span><br><span class=\"line\">  / <span class=\"string\">\"(\"</span> additive:additive <span class=\"string\">\")\"</span> &#123; <span class=\"keyword\">return</span> additive; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">integer <span class=\"string\">\"integer\"</span></span><br><span class=\"line\">  = digits:[<span class=\"number\">0</span><span class=\"number\">-9</span>]+ &#123; <span class=\"keyword\">return</span> makeInteger(digits); &#125;</span><br></pre></td></tr></table></figure></p>\n<p>The parsing expressions of the rules are used to match the input text to the grammar. There are various types of expressions — matching characters or character classes, indicating optional parts and repetition, etc. Expressions can also contain references to other rules. See detailed description below.</p>\n<p>If an expression successfully matches a part of the text when running the generated parser, it produces a match result, which is a JavaScript value. For example:</p>\n<ul>\n<li>An expression matching a literal string produces a JavaScript string containing matched text.</li>\n<li>An expression matching repeated occurrence of some subexpression produces a JavaScript array with all the matches.</li>\n</ul>\n<p>The match results propagate through the rules when the rule names are used in expressions, up to the start rule. The generated parser returns start rule’s match result when parsing is successful.</p>\n<p>One special case of parser expression is a parser action — a piece of JavaScript code inside curly braces (“{” and “}”) that takes match results of some of the the preceding expressions and returns a JavaScript value. This value is considered match result of the preceding expression (in other words, the parser action is a match result transformer).</p>\n<p>In our arithmetics example, there are many parser actions. Consider the action in expression digits:[0-9]+ { return parseInt(digits.join(“”), 10); }. It takes the match result of the expression [0-9]+, which is an array of strings containing digits, as its parameter. It joins the digits together to form a number and converts it to a JavaScript number object.</p>\n<h3 id=\"Parsing-Expression-Types\"><a href=\"#Parsing-Expression-Types\" class=\"headerlink\" title=\"Parsing Expression Types\"></a>Parsing Expression Types</h3><p>There are several types of parsing expressions, some of them containing subexpressions and thus forming a recursive structure:</p>\n<h5 id=\"“literal”\"><a href=\"#“literal”\" class=\"headerlink\" title=\"“literal”\"></a>“literal”</h5><h5 id=\"‘literal’\"><a href=\"#‘literal’\" class=\"headerlink\" title=\"‘literal’\"></a>‘literal’</h5><p>Match exact literal string and return it. The string syntax is the same as in JavaScript. Appending i right after the literal makes the match case-insensitive.</p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\".\"></a>.</h5><p>Match exactly one character and return it as a string.</p>\n<h5 id=\"characters\"><a href=\"#characters\" class=\"headerlink\" title=\"[characters]\"></a>[characters]</h5><p>Match one character from a set and return it as a string. The characters in the list can be escaped in exactly the same way as in JavaScript string. The list of characters can also contain ranges (e.g. [a-z] means “all lowercase letters”). Preceding the characters with ^ inverts the matched set (e.g. [^a-z] means “all character but lowercase letters”). Appending i right after the literal makes the match case-insensitive.</p>\n<h5 id=\"rule\"><a href=\"#rule\" class=\"headerlink\" title=\"rule\"></a>rule</h5><p>Match a parsing expression of a rule recursively and return its match result.</p>\n<h5 id=\"expression\"><a href=\"#expression\" class=\"headerlink\" title=\"( expression )\"></a>( expression )</h5><p>Match a subexpression and return its match result.</p>\n<h5 id=\"expression-1\"><a href=\"#expression-1\" class=\"headerlink\" title=\"expression *\"></a>expression *</h5><p>Match zero or more repetitions of the expression and return their match results in an array. The matching is greedy, i.e. the parser tries to match the expression as many times as possible. Unlike in regular expressions, there is no backtracking.</p>\n<h5 id=\"expression-2\"><a href=\"#expression-2\" class=\"headerlink\" title=\"expression +\"></a>expression +</h5><p>Match one or more repetitions of the expression and return their match results in an array. The matching is greedy, i.e. the parser tries to match the expression as many times as possible. Unlike in regular expressions, there is no backtracking.</p>\n<h5 id=\"expression-3\"><a href=\"#expression-3\" class=\"headerlink\" title=\"expression ?\"></a>expression ?</h5><p>Try to match the expression. If the match succeeds, return its match result, otherwise return null. Unlike in regular expressions, there is no backtracking.</p>\n<h5 id=\"amp-expression\"><a href=\"#amp-expression\" class=\"headerlink\" title=\"&amp; expression\"></a>&amp; expression</h5><p>Try to match the expression. If the match succeeds, just return undefined and do not consume any input, otherwise consider the match failed.</p>\n<h5 id=\"expression-4\"><a href=\"#expression-4\" class=\"headerlink\" title=\"! expression\"></a>! expression</h5><p>Try to match the expression. If the match does not succeed, just return undefined and do not consume any input, otherwise consider the match failed.</p>\n<h5 id=\"amp-predicate\"><a href=\"#amp-predicate\" class=\"headerlink\" title=\"&amp; { predicate }\"></a>&amp; { predicate }</h5><p>The predicate is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. It should return some JavaScript value using the return statement. If the returned value evaluates to true in boolean context, just return undefined and do not consume any input; otherwise consider the match failed.</p>\n<p>The code inside the predicate can access all variables and functions defined in the initializer at the beginning of the grammar.</p>\n<p>The code inside the predicate can also access location information using the location function. It returns an object like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  start: &#123; <span class=\"attr\">offset</span>: <span class=\"number\">23</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  end:   &#123; <span class=\"attr\">offset</span>: <span class=\"number\">23</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">6</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The start and end properties both refer to the current parse position. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.</p>\n<p>The code inside the predicate can also access options passed to the parser using the options variable.</p>\n<p>Note that curly braces in the predicate code must be balanced.</p>\n<h5 id=\"predicate\"><a href=\"#predicate\" class=\"headerlink\" title=\"! { predicate }\"></a>! { predicate }</h5><p>The predicate is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. It should return some JavaScript value using the return statement. If the returned value evaluates to false in boolean context, just return undefined and do not consume any input; otherwise consider the match failed.</p>\n<p>The code inside the predicate can access all variables and functions defined in the initializer at the beginning of the grammar.</p>\n<p>The code inside the predicate can also access location information using the location function. It returns an object like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  start: &#123; <span class=\"attr\">offset</span>: <span class=\"number\">23</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  end:   &#123; <span class=\"attr\">offset</span>: <span class=\"number\">23</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">6</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The start and end properties both refer to the current parse position. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.</p>\n<p>The code inside the predicate can also access options passed to the parser using the options variable.</p>\n<p>Note that curly braces in the predicate code must be balanced.</p>\n<h5 id=\"expression-5\"><a href=\"#expression-5\" class=\"headerlink\" title=\"$ expression\"></a>$ expression</h5><p>Try to match the expression. If the match succeeds, return the matched text instead of the match result.</p>\n<h5 id=\"label-expression\"><a href=\"#label-expression\" class=\"headerlink\" title=\"label : expression\"></a>label : expression</h5><p>Match the expression and remember its match result under given label. The label must be a JavaScript identifier.</p>\n<p>Labeled expressions are useful together with actions, where saved match results can be accessed by action’s JavaScript code.</p>\n<h5 id=\"expression1-expression2-…-expressionn\"><a href=\"#expression1-expression2-…-expressionn\" class=\"headerlink\" title=\"expression1 expression2 … expressionn\"></a>expression1 expression2 … expressionn</h5><p>Match a sequence of expressions and return their match results in an array.</p>\n<h5 id=\"expression-action\"><a href=\"#expression-action\" class=\"headerlink\" title=\"expression { action }\"></a>expression { action }</h5><p>Match the expression. If the match is successful, run the action, otherwise consider the match failed.</p>\n<p>The action is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. The action should return some JavaScript value using the return statement. This value is considered match result of the preceding expression.</p>\n<p>To indicate an error, the code inside the action can invoke the expected function, which makes the parser throw an exception. The function takes two parameters — a description of what was expected at the current position and optional location information (the default is what location would return — see below). The description will be used as part of a message of the thrown exception.</p>\n<p>The code inside an action can also invoke the error function, which also makes the parser throw an exception. The function takes two parameters — an error message and optional location information (the default is what location would return — see below). The message will be used by the thrown exception.</p>\n<p>The code inside the action can access all variables and functions defined in the initializer at the beginning of the grammar. Curly braces in the action code must be balanced.</p>\n<p>The code inside the action can also access the text matched by the expression using the text function.</p>\n<p>The code inside the action can also access location information using the location function. It returns an object like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  start: &#123; <span class=\"attr\">offset</span>: <span class=\"number\">23</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  end:   &#123; <span class=\"attr\">offset</span>: <span class=\"number\">25</span>, <span class=\"attr\">line</span>: <span class=\"number\">5</span>, <span class=\"attr\">column</span>: <span class=\"number\">8</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The start property refers to the position at the beginning of the expression, the end property refers to position after the end of the expression. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.</p>\n<p>The code inside the action can also access options passed to the parser using the options variable.</p>\n<p>Note that curly braces in the action code must be balanced.</p>\n<h5 id=\"expression1-expression2-…-expressionn-1\"><a href=\"#expression1-expression2-…-expressionn-1\" class=\"headerlink\" title=\"expression1 / expression2 / … / expressionn\"></a>expression1 / expression2 / … / expressionn</h5><p>Try to match the first expression, if it does not succeed, try the second one, etc. Return the match result of the first successfully matched expression. If no expression matches, consider the match failed.</p>\n<h2 id=\"Compatibility-1\"><a href=\"#Compatibility-1\" class=\"headerlink\" title=\"Compatibility\"></a>Compatibility</h2><p>Both the parser generator and generated parsers should run well in the following environments:</p>\n<ul>\n<li>Node.js 0.10.0+</li>\n<li>Internet Explorer 8+</li>\n<li>Edge</li>\n<li>Firefox</li>\n<li>Chrome</li>\n<li>Safari</li>\n<li>Opera</li>\n</ul>\n"},{"title":"Java入门及书单","_content":"\n## 入门\n今天周六, 在家闲来无事, 多写俩篇博客(本想说成写文章, 但想了想该文实在承担不起文章二字, 便罢) 把最近看到的和想到的记录一下(恰好也把俩三年前写博客的热情又拾了起来).\n\n经常在知乎上看到, 有人发问, 新人如何入门Java, 新人应该读哪些Java相关的书籍, 今天来谈谈这个问题.\n\nJava入门的话, 分析一下哪些行文算是入门\n* 搭建Java开发环境\n* 掌握Java基础语法(原生类型/包装类型, 变量声明, 循环控制, 方法声明/调用, 类定义, 实例化对象...)\n\n私认为掌握上面这俩点就算Java入门了, 也不需要买什么书籍, 在网上找个教程, 或者去慕课网/B站/油管 上面找个教学教程, 利用3-5天的时间学一学就好了, 会用能记住就ok了, 不必深究语法.\n> 上面第二点只是把当下想到的说了一下, 更多的还请参考([Java 教程](http://www.runoob.com/java/java-tutorial.html)).\n\n入门之后干什么呢? 找一个自己喜欢的方向, 做个小项目练练手. 例如写一个web项目, 再学习一下下面的几个技术\n* SpringBoot: 用于后台web服务器\n* Mybatis: 替代原生的JDBC, 与mysql打交道的\n* vue/element-ui: 写前台页面的\n\n基本上用上面这三个技术就能写一个后台管理系统出来, 当然我也只是把我熟悉的技术写了一下, 如果你身边有其他技术栈的同学指导, 也可以采用其他的技术栈.\n> 如果前台从0写起来比较费劲, 可以参考一个开源的前端工程[vue-element-admin](https://github.com/PanJiaChen/vue-element-admin)\n\n随着功能的不断完善, 你对技术的理解也会不断的加深, 开发的兴趣也会不断加大. 只有对一件事情有兴趣了, 我们才想把它做好, 不是吗? \n\n## 书单\n我基本上没有买过/看过Java基础书, 类似于Java从入门到精通这一类的, 所以我给出的一些书单都具有一些方向性.\n\n##### 网络相关\n* Java网络编程: 将Java中网络相关的包都讲解了一下, 写的不错\n* Netty权威指南: 由于我是做游戏出身的, 工作上基本上netty就是标配了, netty对我在代码架构上有比较大的影响(各种继承, 抽象, 笑哭.jpg)\n* Tomcat架构解析: 对Tomcat剖析的非常深入的一本书, Java程序员必读\n* 图解TCP/IP: 同样的是一本好书, 在轻松氛围下对tcp/ip协议栈有一个比较清晰的认识, 算是tcp/ip协议栈的入门书籍吧.\n* zeroc ice权威指南: 这本书其实没啥好说的, 如果公司在用ice而自己又不熟悉ice的话, 直接买来读就是了, 如果没有用, 暂时也不必入这个坑\n\n##### 并发相关\n并发编程, 按照下面的顺序去读这三本书就好了.\n* Java7 编发编程实战手册, 这本书新手读起来就不错了, 详细介绍了Java中各种并发API的使用.\n* Java并发编程实战, 刚开始编程时不推荐这本书, 新人学习起来难度大一些, 概念颇多.\n* 多处理器编程的艺术, 如果想要深入各种锁的实现, 并发原理的话, 这本书着实该读.\n\n#### JVM相关\n提到Java永远也绕不过去jvm\n* Java虚拟机规范\n* 深入理解Java虚拟机\n* 实战Java虚拟机\n* 垃圾回收的算法与实现\n\n#### 其他\n* 算法(第四版)\n* 大话数据结构\n* Effective Java\n\n目前能想到的书就这么多, 可以根据自己的兴趣和方向选择来读哈.\n\n","source":"_posts/java-books.md","raw":"---\ntitle: Java入门及书单\n---\n\n## 入门\n今天周六, 在家闲来无事, 多写俩篇博客(本想说成写文章, 但想了想该文实在承担不起文章二字, 便罢) 把最近看到的和想到的记录一下(恰好也把俩三年前写博客的热情又拾了起来).\n\n经常在知乎上看到, 有人发问, 新人如何入门Java, 新人应该读哪些Java相关的书籍, 今天来谈谈这个问题.\n\nJava入门的话, 分析一下哪些行文算是入门\n* 搭建Java开发环境\n* 掌握Java基础语法(原生类型/包装类型, 变量声明, 循环控制, 方法声明/调用, 类定义, 实例化对象...)\n\n私认为掌握上面这俩点就算Java入门了, 也不需要买什么书籍, 在网上找个教程, 或者去慕课网/B站/油管 上面找个教学教程, 利用3-5天的时间学一学就好了, 会用能记住就ok了, 不必深究语法.\n> 上面第二点只是把当下想到的说了一下, 更多的还请参考([Java 教程](http://www.runoob.com/java/java-tutorial.html)).\n\n入门之后干什么呢? 找一个自己喜欢的方向, 做个小项目练练手. 例如写一个web项目, 再学习一下下面的几个技术\n* SpringBoot: 用于后台web服务器\n* Mybatis: 替代原生的JDBC, 与mysql打交道的\n* vue/element-ui: 写前台页面的\n\n基本上用上面这三个技术就能写一个后台管理系统出来, 当然我也只是把我熟悉的技术写了一下, 如果你身边有其他技术栈的同学指导, 也可以采用其他的技术栈.\n> 如果前台从0写起来比较费劲, 可以参考一个开源的前端工程[vue-element-admin](https://github.com/PanJiaChen/vue-element-admin)\n\n随着功能的不断完善, 你对技术的理解也会不断的加深, 开发的兴趣也会不断加大. 只有对一件事情有兴趣了, 我们才想把它做好, 不是吗? \n\n## 书单\n我基本上没有买过/看过Java基础书, 类似于Java从入门到精通这一类的, 所以我给出的一些书单都具有一些方向性.\n\n##### 网络相关\n* Java网络编程: 将Java中网络相关的包都讲解了一下, 写的不错\n* Netty权威指南: 由于我是做游戏出身的, 工作上基本上netty就是标配了, netty对我在代码架构上有比较大的影响(各种继承, 抽象, 笑哭.jpg)\n* Tomcat架构解析: 对Tomcat剖析的非常深入的一本书, Java程序员必读\n* 图解TCP/IP: 同样的是一本好书, 在轻松氛围下对tcp/ip协议栈有一个比较清晰的认识, 算是tcp/ip协议栈的入门书籍吧.\n* zeroc ice权威指南: 这本书其实没啥好说的, 如果公司在用ice而自己又不熟悉ice的话, 直接买来读就是了, 如果没有用, 暂时也不必入这个坑\n\n##### 并发相关\n并发编程, 按照下面的顺序去读这三本书就好了.\n* Java7 编发编程实战手册, 这本书新手读起来就不错了, 详细介绍了Java中各种并发API的使用.\n* Java并发编程实战, 刚开始编程时不推荐这本书, 新人学习起来难度大一些, 概念颇多.\n* 多处理器编程的艺术, 如果想要深入各种锁的实现, 并发原理的话, 这本书着实该读.\n\n#### JVM相关\n提到Java永远也绕不过去jvm\n* Java虚拟机规范\n* 深入理解Java虚拟机\n* 实战Java虚拟机\n* 垃圾回收的算法与实现\n\n#### 其他\n* 算法(第四版)\n* 大话数据结构\n* Effective Java\n\n目前能想到的书就这么多, 可以根据自己的兴趣和方向选择来读哈.\n\n","slug":"java-books","published":1,"date":"2018-11-17T07:15:38.000Z","updated":"2018-11-17T11:40:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoljno5q0003uds621uck175","content":"<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>今天周六, 在家闲来无事, 多写俩篇博客(本想说成写文章, 但想了想该文实在承担不起文章二字, 便罢) 把最近看到的和想到的记录一下(恰好也把俩三年前写博客的热情又拾了起来).</p>\n<p>经常在知乎上看到, 有人发问, 新人如何入门Java, 新人应该读哪些Java相关的书籍, 今天来谈谈这个问题.</p>\n<p>Java入门的话, 分析一下哪些行文算是入门</p>\n<ul>\n<li>搭建Java开发环境</li>\n<li>掌握Java基础语法(原生类型/包装类型, 变量声明, 循环控制, 方法声明/调用, 类定义, 实例化对象…)</li>\n</ul>\n<p>私认为掌握上面这俩点就算Java入门了, 也不需要买什么书籍, 在网上找个教程, 或者去慕课网/B站/油管 上面找个教学教程, 利用3-5天的时间学一学就好了, 会用能记住就ok了, 不必深究语法.</p>\n<blockquote>\n<p>上面第二点只是把当下想到的说了一下, 更多的还请参考(<a href=\"http://www.runoob.com/java/java-tutorial.html\" target=\"_blank\" rel=\"noopener\">Java 教程</a>).</p>\n</blockquote>\n<p>入门之后干什么呢? 找一个自己喜欢的方向, 做个小项目练练手. 例如写一个web项目, 再学习一下下面的几个技术</p>\n<ul>\n<li>SpringBoot: 用于后台web服务器</li>\n<li>Mybatis: 替代原生的JDBC, 与mysql打交道的</li>\n<li>vue/element-ui: 写前台页面的</li>\n</ul>\n<p>基本上用上面这三个技术就能写一个后台管理系统出来, 当然我也只是把我熟悉的技术写了一下, 如果你身边有其他技术栈的同学指导, 也可以采用其他的技术栈.</p>\n<blockquote>\n<p>如果前台从0写起来比较费劲, 可以参考一个开源的前端工程<a href=\"https://github.com/PanJiaChen/vue-element-admin\" target=\"_blank\" rel=\"noopener\">vue-element-admin</a></p>\n</blockquote>\n<p>随着功能的不断完善, 你对技术的理解也会不断的加深, 开发的兴趣也会不断加大. 只有对一件事情有兴趣了, 我们才想把它做好, 不是吗? </p>\n<h2 id=\"书单\"><a href=\"#书单\" class=\"headerlink\" title=\"书单\"></a>书单</h2><p>我基本上没有买过/看过Java基础书, 类似于Java从入门到精通这一类的, 所以我给出的一些书单都具有一些方向性.</p>\n<h5 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h5><ul>\n<li>Java网络编程: 将Java中网络相关的包都讲解了一下, 写的不错</li>\n<li>Netty权威指南: 由于我是做游戏出身的, 工作上基本上netty就是标配了, netty对我在代码架构上有比较大的影响(各种继承, 抽象, 笑哭.jpg)</li>\n<li>Tomcat架构解析: 对Tomcat剖析的非常深入的一本书, Java程序员必读</li>\n<li>图解TCP/IP: 同样的是一本好书, 在轻松氛围下对tcp/ip协议栈有一个比较清晰的认识, 算是tcp/ip协议栈的入门书籍吧.</li>\n<li>zeroc ice权威指南: 这本书其实没啥好说的, 如果公司在用ice而自己又不熟悉ice的话, 直接买来读就是了, 如果没有用, 暂时也不必入这个坑</li>\n</ul>\n<h5 id=\"并发相关\"><a href=\"#并发相关\" class=\"headerlink\" title=\"并发相关\"></a>并发相关</h5><p>并发编程, 按照下面的顺序去读这三本书就好了.</p>\n<ul>\n<li>Java7 编发编程实战手册, 这本书新手读起来就不错了, 详细介绍了Java中各种并发API的使用.</li>\n<li>Java并发编程实战, 刚开始编程时不推荐这本书, 新人学习起来难度大一些, 概念颇多.</li>\n<li>多处理器编程的艺术, 如果想要深入各种锁的实现, 并发原理的话, 这本书着实该读.</li>\n</ul>\n<h4 id=\"JVM相关\"><a href=\"#JVM相关\" class=\"headerlink\" title=\"JVM相关\"></a>JVM相关</h4><p>提到Java永远也绕不过去jvm</p>\n<ul>\n<li>Java虚拟机规范</li>\n<li>深入理解Java虚拟机</li>\n<li>实战Java虚拟机</li>\n<li>垃圾回收的算法与实现</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li>算法(第四版)</li>\n<li>大话数据结构</li>\n<li>Effective Java</li>\n</ul>\n<p>目前能想到的书就这么多, 可以根据自己的兴趣和方向选择来读哈.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>今天周六, 在家闲来无事, 多写俩篇博客(本想说成写文章, 但想了想该文实在承担不起文章二字, 便罢) 把最近看到的和想到的记录一下(恰好也把俩三年前写博客的热情又拾了起来).</p>\n<p>经常在知乎上看到, 有人发问, 新人如何入门Java, 新人应该读哪些Java相关的书籍, 今天来谈谈这个问题.</p>\n<p>Java入门的话, 分析一下哪些行文算是入门</p>\n<ul>\n<li>搭建Java开发环境</li>\n<li>掌握Java基础语法(原生类型/包装类型, 变量声明, 循环控制, 方法声明/调用, 类定义, 实例化对象…)</li>\n</ul>\n<p>私认为掌握上面这俩点就算Java入门了, 也不需要买什么书籍, 在网上找个教程, 或者去慕课网/B站/油管 上面找个教学教程, 利用3-5天的时间学一学就好了, 会用能记住就ok了, 不必深究语法.</p>\n<blockquote>\n<p>上面第二点只是把当下想到的说了一下, 更多的还请参考(<a href=\"http://www.runoob.com/java/java-tutorial.html\" target=\"_blank\" rel=\"noopener\">Java 教程</a>).</p>\n</blockquote>\n<p>入门之后干什么呢? 找一个自己喜欢的方向, 做个小项目练练手. 例如写一个web项目, 再学习一下下面的几个技术</p>\n<ul>\n<li>SpringBoot: 用于后台web服务器</li>\n<li>Mybatis: 替代原生的JDBC, 与mysql打交道的</li>\n<li>vue/element-ui: 写前台页面的</li>\n</ul>\n<p>基本上用上面这三个技术就能写一个后台管理系统出来, 当然我也只是把我熟悉的技术写了一下, 如果你身边有其他技术栈的同学指导, 也可以采用其他的技术栈.</p>\n<blockquote>\n<p>如果前台从0写起来比较费劲, 可以参考一个开源的前端工程<a href=\"https://github.com/PanJiaChen/vue-element-admin\" target=\"_blank\" rel=\"noopener\">vue-element-admin</a></p>\n</blockquote>\n<p>随着功能的不断完善, 你对技术的理解也会不断的加深, 开发的兴趣也会不断加大. 只有对一件事情有兴趣了, 我们才想把它做好, 不是吗? </p>\n<h2 id=\"书单\"><a href=\"#书单\" class=\"headerlink\" title=\"书单\"></a>书单</h2><p>我基本上没有买过/看过Java基础书, 类似于Java从入门到精通这一类的, 所以我给出的一些书单都具有一些方向性.</p>\n<h5 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h5><ul>\n<li>Java网络编程: 将Java中网络相关的包都讲解了一下, 写的不错</li>\n<li>Netty权威指南: 由于我是做游戏出身的, 工作上基本上netty就是标配了, netty对我在代码架构上有比较大的影响(各种继承, 抽象, 笑哭.jpg)</li>\n<li>Tomcat架构解析: 对Tomcat剖析的非常深入的一本书, Java程序员必读</li>\n<li>图解TCP/IP: 同样的是一本好书, 在轻松氛围下对tcp/ip协议栈有一个比较清晰的认识, 算是tcp/ip协议栈的入门书籍吧.</li>\n<li>zeroc ice权威指南: 这本书其实没啥好说的, 如果公司在用ice而自己又不熟悉ice的话, 直接买来读就是了, 如果没有用, 暂时也不必入这个坑</li>\n</ul>\n<h5 id=\"并发相关\"><a href=\"#并发相关\" class=\"headerlink\" title=\"并发相关\"></a>并发相关</h5><p>并发编程, 按照下面的顺序去读这三本书就好了.</p>\n<ul>\n<li>Java7 编发编程实战手册, 这本书新手读起来就不错了, 详细介绍了Java中各种并发API的使用.</li>\n<li>Java并发编程实战, 刚开始编程时不推荐这本书, 新人学习起来难度大一些, 概念颇多.</li>\n<li>多处理器编程的艺术, 如果想要深入各种锁的实现, 并发原理的话, 这本书着实该读.</li>\n</ul>\n<h4 id=\"JVM相关\"><a href=\"#JVM相关\" class=\"headerlink\" title=\"JVM相关\"></a>JVM相关</h4><p>提到Java永远也绕不过去jvm</p>\n<ul>\n<li>Java虚拟机规范</li>\n<li>深入理解Java虚拟机</li>\n<li>实战Java虚拟机</li>\n<li>垃圾回收的算法与实现</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li>算法(第四版)</li>\n<li>大话数据结构</li>\n<li>Effective Java</li>\n</ul>\n<p>目前能想到的书就这么多, 可以根据自己的兴趣和方向选择来读哈.</p>\n"},{"title":"test","_content":"```flow\nst=>start: Start|past:>http://www.google.com[blank]\ne=>end: End:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|request\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->sub1(left)->op1\nc2(yes)->io->e\nc2(no)->op2->e\n```","source":"_posts/test.md","raw":"---\ntitle: test\n---\n```flow\nst=>start: Start|past:>http://www.google.com[blank]\ne=>end: End:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|request\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->sub1(left)->op1\nc2(yes)->io->e\nc2(no)->op2->e\n```","slug":"test","published":1,"date":"2018-11-18T08:55:21.000Z","updated":"2018-11-18T08:56:02.000Z","_id":"cjomnc7j90000xxs6da4zr5lh","comments":1,"layout":"post","photos":[],"link":"","content":"<p><div id=\"flowchart-0\" class=\"flow-chart\"></div><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: Start|past:>http://www.google.com[blank]\ne=>end: End:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|request\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->sub1(left)->op1\nc2(yes)->io->e\nc2(no)->op2->e</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script></p>\n","site":{"data":{}},"excerpt":"","more":"<p><div id=\"flowchart-0\" class=\"flow-chart\"></div><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: Start|past:>http://www.google.com[blank]\ne=>end: End:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|request\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->sub1(left)->op1\nc2(yes)->io->e\nc2(no)->op2->e</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}